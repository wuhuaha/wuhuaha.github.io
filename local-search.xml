<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>共享内存</title>
    <link href="/2021/06/05/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/"/>
    <url>/2021/06/05/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<h1 id="一、共享内存的概念"><a href="#一、共享内存的概念" class="headerlink" title="一、共享内存的概念"></a>一、共享内存的概念</h1><p>共享内存（Shared Memory）就是允许多个进程访问同一个内存空间，是在多个进程之间共享和传递数据最高效的方式。操作系统将不同进程之间共享内存安排为同一段物理内存，进程可以将共享内存连接到它们自己的地址空间中，如果某个进程修改了共享内存中的数据，其它的进程读到的数据也将会改变。</p><p>共享内存并未提供锁机制，也就是说，在某一个进程对共享内存的进行读写的时候，不会阻止其它的进程对它的读写。如果要对共享内存的读/写加锁，可以使用信号灯。</p><h1 id="二、相关函数"><a href="#二、相关函数" class="headerlink" title="二、相关函数"></a>二、相关函数</h1><p>Linux中提供了一组函数用于操作共享内存，程序中需要包含以下头文件：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/ipc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/shm.h&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="1、shmget函数"><a href="#1、shmget函数" class="headerlink" title="1、shmget函数"></a>1、shmget函数</h2><p>shmget函数用来获取或创建共享内存，它的声明为：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">shmget</span><span class="hljs-params">(<span class="hljs-keyword">key_t</span> key, <span class="hljs-keyword">size_t</span> size, <span class="hljs-keyword">int</span> shmflg)</span></span>;<br></code></pre></td></tr></table></figure><p>参数key是共享内存的键值，是一个整数，typedef unsigned int key_t，是共享内存在系统中的编号，不同共享内存的编号不能相同，这一点由程序员保证。key用十六进制表示比较好。</p><p>参数size是待创建的共享内存的大小，以字节为单位。</p><p>参数shmflg是共享内存的访问权限，与文件的权限一样，0666|IPC_CREAT表示全部用户对它可读写，如果共享内存不存在，就创建一个共享内存。</p><h2 id="2、shmat函数"><a href="#2、shmat函数" class="headerlink" title="2、shmat函数"></a>2、shmat函数</h2><p>把共享内存连接到当前进程的地址空间。它的声明如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> *<span class="hljs-title">shmat</span><span class="hljs-params">(<span class="hljs-keyword">int</span> shm_id, <span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *shm_addr, <span class="hljs-keyword">int</span> shmflg)</span></span>;<br></code></pre></td></tr></table></figure><p>参数shm_id是由shmget函数返回的共享内存标识。</p><p>参数shm_addr指定共享内存连接到当前进程中的地址位置，通常为空，表示让系统来选择共享内存的地址。</p><p>参数shm_flg是一组标志位，通常为0。</p><p>调用成功时返回一个指向共享内存第一个字节的指针，如果调用失败返回-1.</p><h2 id="3、shmdt函数"><a href="#3、shmdt函数" class="headerlink" title="3、shmdt函数"></a>3、shmdt函数</h2><p>该函数用于将共享内存从当前进程中分离，相当于shmat函数的反操作。它的声明如下：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">shmdt</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *shmaddr)</span></span>;<br></code></pre></td></tr></table></figure><p>参数shmaddr是shmat函数返回的地址。</p><p>调用成功时返回0，失败时返回-1.</p><h2 id="4、shmctl函数"><a href="#4、shmctl函数" class="headerlink" title="4、shmctl函数"></a>4、shmctl函数</h2><p>删除共享内存，它的声明如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">shmctl</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> shm_id, <span class="hljs-built_in">int</span> command, <span class="hljs-keyword">struct</span> shmid_ds *buf</span>)</span>;<br></code></pre></td></tr></table></figure><p>参数shm_id是shmget函数返回的共享内存标识符。</p><p>参数command填IPC_RMID。</p><p>参数buf填0。</p><p>解释一下，shmctl是控制共享内存的函数，其功能不只是删除共享内容，但其它的功能没什么用，所以不介绍了。</p><p><strong>注意，用root创建的共享内存，不管创建的权限是什么，普通用户无法删除。</strong></p><h1 id="三、示例程序"><a href="#三、示例程序" class="headerlink" title="三、示例程序"></a>三、示例程序</h1><p><strong>示例（book258.cpp）</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 程序名：book258.cpp，此程序用于演示共享内存的用法</span><br><span class="hljs-comment"> * 作者：C语言技术网(www.freecplus.net) 日期：20190525</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/ipc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/shm.h&gt;</span> </span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">int</span> shmid; <span class="hljs-comment">// 共享内存标识符</span><br> <br>  <span class="hljs-comment">// 创建共享内存，键值为0x5005，共1024字节。</span><br>  <span class="hljs-keyword">if</span> ( (shmid = <span class="hljs-built_in">shmget</span>((<span class="hljs-keyword">key_t</span>)<span class="hljs-number">0x5005</span>, <span class="hljs-number">1024</span>, <span class="hljs-number">0640</span>|IPC_CREAT)) == <span class="hljs-number">-1</span>)<br>  &#123; <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;shmat(0x5005) failed\n&quot;</span>); <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>; &#125;<br>   <br>  <span class="hljs-keyword">char</span> *ptext=<span class="hljs-number">0</span>;   <span class="hljs-comment">// 用于指向共享内存的指针</span><br> <br>  <span class="hljs-comment">// 将共享内存连接到当前进程的地址空间，由ptext指针指向它</span><br>  ptext = (<span class="hljs-keyword">char</span> *)<span class="hljs-built_in">shmat</span>(shmid, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br> <br>  <span class="hljs-comment">// 操作本程序的ptext指针，就是操作共享内存</span><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;写入前：%s\n&quot;</span>,ptext);<br>  <span class="hljs-built_in">sprintf</span>(ptext,<span class="hljs-string">&quot;本程序的进程号是：%d&quot;</span>,<span class="hljs-built_in">getpid</span>());<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;写入后：%s\n&quot;</span>,ptext);<br> <br>  <span class="hljs-comment">// 把共享内存从当前进程中分离</span><br>  <span class="hljs-built_in">shmdt</span>(ptext);<br>   <br>  <span class="hljs-comment">// 删除共享内存</span><br>  <span class="hljs-comment">// if (shmctl(shmid, IPC_RMID, 0) == -1)</span><br>  <span class="hljs-comment">// &#123; printf(&quot;shmctl(0x5005) failed\n&quot;); return -1; &#125;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>运行效果</strong></p><p><img src="http://www.freecplus.net/runoobFiles/ueditor/image/20200317/1584448561097027774.png" alt="image.png"></p><p>注意，程序第一次运行的时候，共享内存未创建，所以第一次运行程序的时候，共享内存中的内容为空。之后程序每次运行都能获取到上一次程序运行写入的内容。</p><h1 id="四、其它的操作命令"><a href="#四、其它的操作命令" class="headerlink" title="四、其它的操作命令"></a>四、其它的操作命令</h1><p>用ipcs -m可以查看系统的共享内存，内容有键值（key），共享内存编号（shmid），创建者（owner），权限（perms），大小（bytes）。</p><p><img src="http://www.freecplus.net/runoobFiles/ueditor/image/20200317/1584448593057028027.png" alt="image.png"></p><p>用ipcrm -m 共享内存编号，可以手工删除共享内存，如下：</p><p><img src="http://www.freecplus.net/runoobFiles/ueditor/image/20200317/1584448610362080021.png" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
      <tag>计算机系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>僵尸进程及其处理方法</title>
    <link href="/2021/06/05/%E5%83%B5%E5%B0%B8%E8%BF%9B%E7%A8%8B%E5%8F%8A%E5%85%B6%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/"/>
    <url>/2021/06/05/%E5%83%B5%E5%B0%B8%E8%BF%9B%E7%A8%8B%E5%8F%8A%E5%85%B6%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p><strong>什么是僵尸进程</strong>？</p><p>首先内核会释放终止进程(调用了exit系统调用)所使用的所有存储区，关闭所有打开的文件等，但内核为每一个终止子进程保存了一定量的信息。这些信息至少包括进程ID，进程的终止状态，以及该进程使用的CPU时间，所以当终止子进程的父进程调用wait或waitpid时就可以得到这些信息。</p><p>而僵尸进程就是指：一个进程执行了exit系统调用退出，而其父进程并没有为它收尸(调用wait或waitpid来获得它的结束状态)的进程。</p><p>任何一个子进程(init除外)在exit后并非马上就消失，而是留下一个称外僵尸进程的数据结构，等待父进程处理。这是每个子进程都必需经历的阶段。另外子进程退出的时候会向其父进程发送一个SIGCHLD信号。</p><p><strong>僵尸进程的目的？</strong></p><p>设置僵死状态的目的是维护子进程的信息，以便父进程在以后某个时候获取。这些信息至少包括进程ID，进程的终止状态，以及该进程使用的CPU时间，所以当终止子进程的父进程调用wait或waitpid时就可以得到这些信息。如果一个进程终止，而该进程有子进程处于僵尸状态，那么它的所有僵尸子进程的父进程ID将被重置为1（init进程）。继承这些子进程的init进程将清理它们（也就是说init进程将wait它们，从而去除它们的僵尸状态）。</p><p><strong>如何避免僵尸进程？</strong></p><ol><li>通过signal(SIGCHLD, SIG_IGN)通知内核对子进程的结束不关心，由内核回收。如果<strong>不想让父进程挂起</strong>，可以在父进程中加入一条语句：signal(SIGCHLD,SIG_IGN);表示父进程忽略SIGCHLD信号，该信号是子进程退出的时候向父进程发送的。</li><li>父进程调用wait/waitpid等函数等待子进程结束，如果尚无子进程退出<strong>wait会导致父进程阻塞</strong>。<strong>waitpid可以通过传递WNOHANG使父进程不阻塞立即返回</strong>。</li><li>如果父进程很忙可以用signal注册信号处理函数，在信号处理函数调用wait/waitpid等待子进程退出。</li><li>通过两次调用fork。父进程首先调用fork创建一个子进程然后waitpid等待子进程退出，子进程再fork一个孙进程后退出。这样子进程退出后会被父进程等待回收，而对于孙子进程其父进程已经退出所以孙进程成为一个孤儿进程，孤儿进程由init进程接管，孙进程结束后，init会等待回收。</li></ol><p>第一种方法忽略SIGCHLD信号，这常用于并发服务器的性能的一个技巧因为并发服务器常常fork很多子进程，子进程终结之后需要服务器进程去wait清理资源。如果将此信号的处理方式设为忽略，可让内核把僵尸子进程转交给init进程去处理，省去了大量僵尸进程占用系统资源。</p><p><strong>僵尸进程处理办法</strong></p><h3 id="1-wait-函数"><a href="#1-wait-函数" class="headerlink" title="1 wait()函数"></a>1 wait()函数</h3><p>#include &lt;sys/types.h&gt;<br>#include &lt;sys/wait.h&gt;</p><p>pid_t wait(int *status);</p><p><strong>进程一旦调用了wait，就立即阻塞自己</strong>，由wait自动分析是否当前进程的某个子进程已经退出，如果让它找到了这样一个已经变成僵尸的子进程，wait就会收集这个子进程的信息，并把它彻底销毁后返回；如果没有找到这样一个子进程，wait就会一直阻塞在这里，直到有一个出现为止。<br>参数status用来保存被收集进程退出时的一些状态，它是一个指向int类型的指针。但如果我们对这个子进程是如何死掉的毫不在意，只想把这个僵尸进程消灭掉，（事实上绝大多数情况下，我们都会这样想），我们就可以设定这个参数为NULL，就象下面这样：</p><p> pid = wait(NULL);</p><p>如果成功，wait会返回被收集的子进程的进程ID，如果调用进程没有子进程，调用就会失败，此时wait返回-1，同时errno被置为ECHILD。</p><ul><li>wait系统调用会使父进程暂停执行，直到它的一个子进程结束为止。</li><li>返回的是子进程的PID，它通常是结束的子进程</li><li>状态信息允许父进程判定子进程的退出状态，即从子进程的main函数返回的值或子进程中exit语句的退出码。</li><li>如果status不是一个空指针，状态信息将被写入它指向的位置</li></ul><p>可以上述的一些宏判断子进程的退出情况：</p><p><a href="https://images0.cnblogs.com/blog/529981/201307/13113019-64f7b2b6adeb4402aac7f3cc5c079f0c.png"><img src="https://images0.cnblogs.com/blog/529981/201307/13113019-6a9fe47185da4a35a138df11ac942ae7.png" alt="QQ截图20130713110230"></a></p><h3 id="2-waitpid-函数"><a href="#2-waitpid-函数" class="headerlink" title="2 waitpid()函数"></a>2 waitpid()函数</h3><p>#include &lt;sys/types.h&gt;<br>#include &lt;sys/wait.h&gt;</p><p>pid_t waitpid(pid_t pid, int *status, int options);</p><p>参数:</p><p>status:如果不是空，会把状态信息写到它指向的位置，与wait一样</p><p>options：允许改变waitpid的行为，最有用的一个选项是WNOHANG,它的作用是防止waitpid把调用者的执行挂起</p><p>The value of options is an OR of zero or more of the following con-<br>stants:</p><p>WNOHANG   return immediately if no child has exited.</p><p>WUNTRACED  also return if a child has stopped (but not traced via<br>      ptrace(2)). Status for traced children which have stopped<br>      is provided even if this option is not specified.</p><p>WCONTINUED (since Linux 2.6.10)<br>      also return if a stopped child has been resumed by delivery<br>      of SIGCONT.</p><p>返回值：如果成功返回等待子进程的ID，失败返回-1</p><h4 id="对于waitpid的p-i-d参数的解释与其值有关："><a href="#对于waitpid的p-i-d参数的解释与其值有关：" class="headerlink" title="对于waitpid的p i d参数的解释与其值有关："></a>对于waitpid的p i d参数的解释与其值有关：</h4><p>pid == -1 等待任一子进程。于是在这一功能方面waitpid与wait等效。</p><p>pid &gt; 0 等待其进程I D与p i d相等的子进程。</p><p>pid == 0 等待其组I D等于调用进程的组I D的任一子进程。换句话说是与调用者进程同在一个组的进程。</p><p>pid &lt; -1 等待其组I D等于p i d的绝对值的任一子进程</p><h4 id="wait与waitpid区别："><a href="#wait与waitpid区别：" class="headerlink" title="wait与waitpid区别："></a>wait与waitpid区别：</h4><ul><li>在一个子进程终止前， wait 使其调用者阻塞，而waitpid 有一选择项，可使调用者不阻塞。</li><li>waitpid并不等待第一个终止的子进程—它有若干个选择项，可以控制它所等待的特定进程。</li><li>实际上wait函数是waitpid函数的一个特例。waitpid(-1, &amp;status, 0);</li></ul><p>示例：</p><p>如以下代码会创建100个子进程，但是父进程并未等待它们结束，所以在父进程退出前会有100个僵尸进程。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span>  </span><br>   <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br>   <br>  <span class="hljs-keyword">int</span> i;  <br>  <span class="hljs-keyword">pid_t</span> pid;  <br>   <br>  <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">100</span>; i++) &#123;  <br>    pid = fork();  <br>    <span class="hljs-keyword">if</span>(pid == <span class="hljs-number">0</span>)  <br>      <span class="hljs-keyword">break</span>;  <br>  &#125;  <br>   <br>  <span class="hljs-keyword">if</span>(pid&gt;<span class="hljs-number">0</span>) &#123;  <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;press Enter to exit...&quot;</span>);  <br>    <span class="hljs-built_in">getchar</span>();  <br>  &#125;  <br>   <br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;  <br></code></pre></td></tr></table></figure><p>其中一个解决方法即是编写一个SIGCHLD信号处理程序来调用wait/waitpid来等待子进程返回。 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;signal.h&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/wait.h&gt;</span>  </span><br>   <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">wait4children</span><span class="hljs-params">(<span class="hljs-keyword">int</span> signo)</span> </span>&#123;  <br>   <br>  <span class="hljs-keyword">int</span> status;  <br>  <span class="hljs-built_in">wait</span>(&amp;status);  <br>   <br>&#125;  <br>   <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br>   <br>  <span class="hljs-keyword">int</span> i;  <br>  <span class="hljs-keyword">pid_t</span> pid;  <br>   <br>  <span class="hljs-built_in">signal</span>(SIGCHLD, wait4children);  <br>   <br>  <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">100</span>; i++) &#123;  <br>    pid = fork();  <br>    <span class="hljs-keyword">if</span>(pid == <span class="hljs-number">0</span>)  <br>      <span class="hljs-keyword">break</span>;  <br>  &#125;  <br>   <br>  <span class="hljs-keyword">if</span>(pid&gt;<span class="hljs-number">0</span>) &#123;  <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;press Enter to exit...&quot;</span>);  <br>    <span class="hljs-built_in">getchar</span>();  <br>  &#125;  <br>   <br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;  <br></code></pre></td></tr></table></figure><p>但是通过运行程序发现还是会有僵尸进程，而且每次僵尸进程的数量都不定。这是为什么呢？其实主要是因为<strong>Linux的信号机制是不排队的</strong>，假如在某一时间段多个子进程退出后都会发出SIGCHLD信号，但父进程来不及一个一个地响应，所以最后父进程实际上只执行了一次信号处理函数。但执行一次信号处理函数只等待一个子进程退出，所以最后会有一些子进程依然是僵尸进程。（我的修改：linux的信号分为可靠信号和不可靠信号，主要区别在于，不可靠信号的相同信号会合并为一条，比如发送了5个kill -2 实际上只有2个，所以导致了一些问题。）</p><p>虽然这样但是有一点是明了的，就是收到SIGCHLD必然有子进程退出，而我们可以在信号处理函数里循环调用waitpid函数来等待所有的退出的子进程。至于为什么不用wait，主要原因是在wait在清理完所有僵尸进程后再次等待会阻塞。</p><p>所以最佳方案如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;signal.h&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;errno.h&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/wait.h&gt;</span>  </span><br>   <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">wait4children</span><span class="hljs-params">(<span class="hljs-keyword">int</span> signo)</span> </span>&#123;  <br>  <span class="hljs-keyword">int</span> status;  <br>  <span class="hljs-keyword">while</span>(<span class="hljs-built_in">waitpid</span>(<span class="hljs-number">-1</span>, &amp;status, WNOHANG) &gt; <span class="hljs-number">0</span>);  <br>&#125;  <br>   <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br>   <br>  <span class="hljs-keyword">int</span> i;  <br>  <span class="hljs-keyword">pid_t</span> pid;  <br>   <br>  <span class="hljs-built_in">signal</span>(SIGCHLD, wait4children);  <br>   <br>  <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">100</span>; i++) &#123;  <br>    pid = fork();  <br>    <span class="hljs-keyword">if</span>(pid == <span class="hljs-number">0</span>)  <br>      <span class="hljs-keyword">break</span>;  <br>  &#125;  <br>   <br>  <span class="hljs-keyword">if</span>(pid&gt;<span class="hljs-number">0</span>) &#123;  <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;press Enter to exit...&quot;</span>);  <br>    <span class="hljs-built_in">getchar</span>();  <br>  &#125;  <br>   <br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;  <br></code></pre></td></tr></table></figure><p>这里使用waitpid而不是使用wait的原因在于：我们在一个循环内调用waitpid，以获取所有已终止子进程的状态。我们必须指定WNOHANG选项，它告诉waitpid在有尚未终止的子进程在运行时不要阻塞。我们不能在循环内调用wait，因为没有办法防止wait在正运行的子进程尚有未终止时阻塞。</p>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
      <tag>c++</tag>
      
      <tag>计算机系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>虚拟内存与物理内存</title>
    <link href="/2021/06/05/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%E4%B8%8E%E7%89%A9%E7%90%86%E5%86%85%E5%AD%98/"/>
    <url>/2021/06/05/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%E4%B8%8E%E7%89%A9%E7%90%86%E5%86%85%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<p>计算机组成原理目录：<a href="https://www.cnblogs.com/binarylei/p/12585607.html">https://www.cnblogs.com/binarylei/p/12585607.html</a>**</p><p>程序运行时，指令和数据都需要先加载到内存里面，才会被 CPU 拿去执行。那程序中的虚拟地址最终是如何映射到内存中的物理地址呢？从简单页表，到多级页表，再到 TLB，都解决了那些问题？</p><ol><li><strong>简单页表</strong>：类似数组，时间复杂度为 O(1)。但空间复杂度为数组的长度，即页的个数。32 位的内存地址为 4MB（= 2^20 * 4byte）。</li><li><strong>多级页表</strong>：类似 B+ 树，时间复杂度为 O(n)，如 4 级页表就需要查询 4 次。但程序只需要存储正在使用的虚拟页的映射关系，空间复杂度大大降低。</li><li><strong>TLB</strong>：使用缓存保存之前虚拟页的映射关系。因为指令和数据往往都是连续的，存在空间局部性和时间局部性。也就是说，连续执行的多个指令和数据往往在同一个虚拟页中，没必要每次都从内存中读取页表来解析虚拟地址。</li></ol><h2 id="1-虚拟地址和物理地址"><a href="#1-虚拟地址和物理地址" class="headerlink" title="1. 虚拟地址和物理地址"></a>1. 虚拟地址和物理地址</h2><p>另外，学习本节时可以将下面两个知识点对比学习。</p><ol><li>内存地址映射：虚拟地址是如何映射到物理地址？</li><li>高速缓存映射：内存地址是如何映射到 CPU Cache？</li></ol><p>程序在编译时不可能知道装载后的物理内存地址，实际上，程序编译生成的地址都是虚拟地址。在我们日常使用的 Linux 或者 Windows 操作系统下，程序并不能直接访问物理内存。为了解决这个问题，当程序装载后，会通过虚拟地址映射到真实的物理地址。</p><p><strong>图1：虚拟地址和物理地址映射</strong></p><p><img src="/images/0-1.png" alt="Lena"></p><p>内存被分成固定大小的<strong>页(Page)<strong>，然后再通过</strong>虚拟内存地址(Virtual Address)</strong> 到<strong>物理内存地址(Physical Address)</strong> 的**地址转换(Address Translation)**，才能访问实际存放数据的物理内存位置。而我们的程序看到的内存地址，都是虚拟内存地址。</p><p>这些虚拟内存地址究竟是怎么转换成物理内存地址的呢？这一讲里，我们就来看一看。</p><h2 id="2-简单页表"><a href="#2-简单页表" class="headerlink" title="2. 简单页表"></a>2. 简单页表</h2><p>**页表(Page Table)**：想要把虚拟内存地址，映射到物理内存地址，最直观的办法，就是来建一张映射表。这个映射表，能够实现虚拟内存里面的页，到物理内存里面的页的映射。这个映射表，在计算机里面，就叫作页表。</p><p>页表地址转换，把一个内存地址分成<strong>页号(Directory)</strong> 和<strong>偏移量(Offset)</strong> 两个部分。以一个 32 位的内存地址，页的大小 4KB 为例，内存地址的 20 位的高位表示页号，12 位（212 = 4KB）的低位表示偏移量。</p><p><strong>图2：页表结构</strong></p><p>![Lena][(/images/0-2.png)</p>]]></content>
    
    
    <categories>
      
      <category>计算机系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
      <tag>c++</tag>
      
      <tag>计算机系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>进程与线程</title>
    <link href="/2021/05/31/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/"/>
    <url>/2021/05/31/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="1-基本区别"><a href="#1-基本区别" class="headerlink" title="1.基本区别"></a>1.基本区别</h2><p>程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。 在当代面向线程设计的计算机结构中，进程是线程的容器。程序是指令、数据及其组织形式的描述，进程是程序的实体。是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。程序是指令、数据及其组织形式的描述，进程是程序的实体。</p><p><strong>线程（thread）</strong> 是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。</p><blockquote><p>我们简单总结下：</p></blockquote><p>进程：指在系统中正在运行的一个应用程序；程序一旦运行就是进程；<strong>进程——资源分配的最小单位</strong>  。</p><p>线程：系统分配处理器时间资源的基本单元，或者说进程之内独立执行的一个单元执行流。<strong>线程——程序执行的最小单位</strong>。</p><p>进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。但对于一些要求同时进行并且又要共享某些变量的并发操作，只能用线程，不能用进程。</p><p>两个名词不过是对应的CPU时间段的描述，名词就是这样的功能。</p><ul><li><strong>进程就是上下文切换之间的程序执行的部分。是运行中的程序的描述，也是对应于该段CPU执行时间的描述。</strong></li><li><strong>在软件编码方面，我们说的进程，其实是稍不同的，编程语言中创建的进程是一个无限loop，对应的是tcb块。这个是操作系统进行调度的单位。所以和上面的cpu执行时间段还是不同的。</strong></li><li><strong>进程，与之相关的东东有寻址空间，寄存器组，堆栈空间等。即不同的进程，这些东东都不同，从而能相互区别。</strong></li></ul><p>线程是什么呢？<br>进程的颗粒度太大，每次的执行都要进行进程上下文的切换。如果我们把进程比喻为一个运行在电脑上的软件，那么一个软件的执行不可能是一条逻辑执行的，必定有多个分支和多个程序段，就好比要实现程序A，实际分成 a，b，c等多个块组合而成。那么这里具体的执行就可能变成：</p><p>程序A得到CPU =》CPU加载上下文，开始执行程序A的a小段，然后执行A的b小段，然后再执行A的c小段，最后CPU保存A的上下文。</p><p>这里a，b，c的执行是共享了A进程的上下文，CPU在执行的时候仅仅切换线程的上下文，而没有进行进程上下文切换的。进程的上下文切换的时间开销是远远大于线程上下文时间的开销。这样就让CPU的有效使用率得到提高。这<strong>里的a，b，c就是线程，也就是说线程是共享了进程的上下文环境，的更为细小的CPU时间段。线程主要共享的是进程的地址空间。</strong></p><ol start="2"><li><h2 id="深入理解："><a href="#深入理解：" class="headerlink" title="深入理解："></a>深入理解：</h2></li></ol><p><img src="https://img2018.cnblogs.com/blog/1629488/201906/1629488-20190622115300479-2129397443.png" alt="进程"></p><h3 id="2-1-进程-线程-内存-文件-网络句柄"><a href="#2-1-进程-线程-内存-文件-网络句柄" class="headerlink" title="2.1 进程(线程+内存+文件/网络句柄)"></a>2.1 进程(线程+内存+文件/网络句柄)</h3><p>我们通过上面的图片进行进一步理解：</p><p><strong>“内存”：</strong><br>我们通常所理解的内存是我们所见到的(2G/4G/8G/16G)物理内存,它为什么会在进程之中呢？<br>实际上，这里的内存是逻辑内存。指的是内存的寻址空间。每个进程的内存是相互独立的。<br>否则的话会出现一个问题：我们把指针的值改一改就指向其他进程的内存了，通过这样我们岂不是就可以看到其他进程中”微信”或者是”网上银行”的信息，<br>这样的话，那我们的微信聊天记录或者是银行账户的信息就都被别人找到了，这是一个很危险的信号！显然这样是不可能的。</p><p><strong>“文件/网络句柄”：</strong><br>它们是所有的进程所共有的，例如打开同一个文件，去抢同一个网络的端口这样的操作是被允许的。</p><p><strong>“线程”：</strong><br>接下来，我们就要介绍一下我们的“线程”有关知识</p><p><img src="https://img2018.cnblogs.com/blog/1629488/201906/1629488-20190622115318812-109279192.png" alt="线程"></p><h3 id="2-2-线程-栈-PC-TLS"><a href="#2-2-线程-栈-PC-TLS" class="headerlink" title="2.2 线程(栈+PC+TLS)"></a>2.2 线程(栈+PC+TLS)</h3><h4 id="2-2-1-栈"><a href="#2-2-1-栈" class="headerlink" title="2.2.1 栈:"></a>2.2.1 栈:</h4><p>我们通常都是说调用堆栈，其实这里的堆是没有含义的，调用堆栈就是调用栈的意思。<br>那么我们的栈里面有什么呢？<br>我们从主线程的入口main函数，会不断的进行函数调用，<br>每次调用的时候，会把所有的参数和返回地址压入到栈中。</p><h4 id="2-2-2-PC："><a href="#2-2-2-PC：" class="headerlink" title="2.2.2 PC："></a>2.2.2 PC：</h4><p>Program Counter 程序计数器，操作系统真正运行的是一个个的线程，<br>而我们的进程只是它的一个容器。PC就是指向当前的指令，而这个指令是放在内存中。<br>每个线程都有一串自己的指针，去指向自己当前所在内存的指针。<br>计算机绝大部分是存储程序性的，说的就是我们的数据和程序是存储在同一片内存里的<br>这个内存中既有我们的数据变量又有我们的程序。所以我们的PC指针就是指向我们的内存的。</p><h5 id="2-2-2-1-缓冲区溢出"><a href="#2-2-2-1-缓冲区溢出" class="headerlink" title="2.2.2.1 缓冲区溢出"></a>2.2.2.1 缓冲区溢出</h5><p>例如我们经常听到一个漏洞：<strong>缓冲区溢出</strong><br>这是什么意思呢？<br>例如：我们有个地方要输入用户名，本来是用来存数据的地方。<br>然后黑客把数据输入的特别长。这个长度超出了我们给数据存储的内存区，这时候跑到了<br>我们给程序分配的一部分内存中。黑客就可以通过这种办法将他所要运行的代码<br>写入到用户名框中，来植入进来。我们的解决方法就是，用用户名的长度来限制不要超过<br>用户名的缓冲区的大小来解决。</p><h4 id="2-2-3-TLS"><a href="#2-2-3-TLS" class="headerlink" title="2.2.3 TLS:"></a>2.2.3 TLS:</h4><p>全称：thread local storage<br>之前我们看到每个进程都有自己独立的内存，这时候我们想，我们的线程有没有一块独立的内存呢?答案是有的，就是TLS。<br>可以用来存储我们线程所独有的数据。<br>可以看到：线程才是我们操作系统所真正去运行的，而进程呢，则是像容器一样他把需要的一些东西放在了一起，而把不需要的东西做了一层隔离，进行隔离开来。</p><h2 id="3、切换消耗"><a href="#3、切换消耗" class="headerlink" title="3、切换消耗"></a>3、切换消耗</h2><h3 id="进程切换的开销"><a href="#进程切换的开销" class="headerlink" title="进程切换的开销"></a>进程切换的开销</h3><p>开销分成两种:<br>A.直接开销：</p><ul><li>切换页表全局目录；</li><li>切换内核态堆栈；</li><li>切换硬件上下文：</li><li>寄存器当中的数据；</li><li>刷新TLB；</li><li>执行操作系统调度器的代码</li></ul><p>B.间接开销：<br>间接开销指的是由于切换到一个新进程后，各种缓存对于新的进程而言未命中的概率非常大。进程如果跨CPU调度，那么之前的TLB、L1、L2、L3缓存因为运行的进程已经变了，缓存所带来的空间局部性和时间局部性的优势失效，当前缓存起来的代码、数据失效。这将导致新进程需要重新从内存当中获取数据和代码，并将其缓存起来。从而导致穿透到内存的IO会变多，由于CPU和内存读取速度的差异很大，这部分带来的开销也非常大。</p><h3 id="线程切换的开销"><a href="#线程切换的开销" class="headerlink" title="线程切换的开销"></a>线程切换的开销</h3><p>线程切换和进程切换之间的主要区别在于：在线程切换期间，虚拟内存空间保持不变。<br>进程切换期间，TLB会被刷新，从而使内存访问在一段时间内变得更加昂贵。</p><h2 id="4-通讯方式"><a href="#4-通讯方式" class="headerlink" title="4.通讯方式"></a>4.通讯方式</h2><p>进程间：</p><ul><li>共享内存，消息队列传递，</li><li>无名管道(有血缘关系的进程间)，有名管道(允许无亲缘关系关系进程间通信)，</li><li>信号，信号量(主要作为进程间以及同一进程内不同线程之间的同步手段。)，</li><li>套接字</li></ul><p>几种方式的比较：<br>(1) 管道：速度慢、容量有限<br>(2) 消息队列：容量收到系统限制，且要注意第一次读的时候，要考虑上一次没有读完数据的问题。是用于两个进程之间的通讯，首先在一个进程中创建一个消息队列，然后再往消息队列中写数据，而另一个进程则从那个消息队列中取数据。需要注意的是，消息队列是用创建文件的方式建立的，如果一个进程向某个消息队列中写入了数据之后，另一个进程并没有取出数据，即使向消息队列中写数据的进程已经结束，保存在消息队列中的数据并没有消失，也就是说下次再从这个消息队列读数据的时候，就是上次的数据！<br>(3) 信号量：不能传递复杂信息，只能用来同步。<br>(4) 共享内存：能够很容易控制容量，速度快，但要保持同步，比如一个进程在写的时候，另一个进程要注意读写的问题，相当于线程中的线程安全。</p><p>线程间：</p><ul><li><p>锁机制(互斥锁、条件变量、读写锁)，信号量，信号</p></li><li><p>线程间的通信目的主要是用于线程同步，所以线程没有像进程通信中的用于数据交换的通信机制。</p></li></ul><h2 id="5-线程资源"><a href="#5-线程资源" class="headerlink" title="5.线程资源"></a>5.线程资源</h2><p>线程共享进程的资源：</p><ul><li>进程代码段 ；</li><li>进程的公有数据；</li><li>进程打开的文件描述符；</li><li>信号的处理器；</li><li>进程的当前目录；</li><li>进程用户ID与进程组ID</li></ul><p>线程独立的资源：</p><ul><li>线程ID</li><li>寄存器组的值；</li><li>线程栈；</li><li>错误返回码；</li><li>线程的信号屏蔽码；</li><li>线程的优先级</li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
      <tag>c++</tag>
      
      <tag>计算机系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>移动语义与完美转发</title>
    <link href="/2021/05/30/%E7%A7%BB%E5%8A%A8%E8%AF%AD%E4%B9%89%E4%B8%8E%E5%AE%8C%E7%BE%8E%E8%BD%AC%E5%8F%91/"/>
    <url>/2021/05/30/%E7%A7%BB%E5%8A%A8%E8%AF%AD%E4%B9%89%E4%B8%8E%E5%AE%8C%E7%BE%8E%E8%BD%AC%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<p>新标准重新定义了lvalue和rvalue，并允许函数依照这两种不同的类型进行重载。通过对于右值（rvalue）的重新定义，语言实现了移动语义（move semantic）和完美转发（perfect forwarding），通过这种方法，C++实现了在保留原有的语法并不改动已存在的代码的基础上提升代码性能的目的。作为一个C++0x标准的初学者，理解这些概念其实还有有一定的困难的，加上网上能够找得到的中文资源有比较的少，少有的资源写的也都不是那么的通俗易懂，多少有点晦涩，这也为学习设置了一定的障碍。同样作为初学者，我就花了不少时间研究这些概念，终于算是有所体悟。这里就把我粗浅的理解记录于此，希望能够给后来接触这些内容的同侪们以帮助，也供我日后参考。谬误之处在所难免，还望不吝赐教。</p><h2 id="移动语义解决了什么问题"><a href="#移动语义解决了什么问题" class="headerlink" title="移动语义解决了什么问题"></a>移动语义解决了什么问题</h2><p>我们先看一段代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> &#123;</span><br>    <span class="hljs-keyword">int</span> * arr&#123;<span class="hljs-literal">nullptr</span>&#125;;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Test</span>():<span class="hljs-built_in">arr</span>(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">5000</span>]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;) &#123; <br>    cout &lt;&lt; <span class="hljs-string">&quot;default constructor&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-built_in">Test</span>(<span class="hljs-keyword">const</span> Test &amp; t) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;copy constructor&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">if</span> (arr == <span class="hljs-literal">nullptr</span>) arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">5000</span>];<br>        <span class="hljs-built_in">memcpy</span>(arr, t.arr, <span class="hljs-number">5000</span>*<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">int</span>));<br>    &#125;<br>    ~<span class="hljs-built_in">Test</span>()&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;destructor&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">delete</span> [] arr;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>这是一段常见的类的定义。在其中我们定义了一个<code>int</code>类型数组<code>arr</code>，它一共有5000个元素。考虑到我们可以使用一个已有的<code>Test</code>对象来初始化一个新的<code>Test</code>对象，我们实现了复制构造函数（copy constructor）。</p><p>接下来，我们考虑一个这样的应用场景：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">int main() &#123;<br>Test reusable;<br><span class="hljs-regexp">//</span> <span class="hljs-keyword">do</span> something to reusable<br>Test duplicated(reusable);<br><span class="hljs-regexp">//</span> <span class="hljs-keyword">do</span> something to reusable<br>&#125;<br></code></pre></td></tr></table></figure><p>我们创建了一个<code>reusable</code>变量并对其做了某一些操作，之后我们使用这个更改过的<code>reusable</code>变量初始化一个<code>duplicated</code>变量，在对其进行初始化之后，我们依然需要对<code>reusable</code>做其他的操作。在这个情境下，<code>reusable</code>和<code>duplicated</code>变量各自有自己的用处，没有谁是为谁附带产生的。所以我们看到，在这个情境下，我们的复制构造函数是合情合理的。</p><p>现在我们考虑另外一个场景：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">Test </span>createTest() &#123;<br>    return Test();<br>&#125;<br><br>int main() &#123;<br>    Test t(createTest());<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个场景当中，我们需要使用一个工厂函数来构造<code>Test</code>的实例。那么在这个场景下，我们的复制构造函数被调用了2次。这两次调用相当于复制了10000个元素，是一个不小的开销。可是我们的这个开销有意义吗？我们知道，在工厂函数当中建立的<code>Test</code>实例在函数返回时就会被析构，而用于返回值的<code>Test</code>的临时实例也会在将值赋给<code>main</code>函数当中的<code>t</code>之后被析构。也就是说，这两个临时对象事实上并没有什么意义。由于构造他们而产生的复制的开销其实完全没有必要（事实上，编译器一般会对这种情况进行(N)RVO，但不见得每次都能很好的优化）。所以我们就在考虑，有没有可能我们可以将在工厂函数当中构造的成员变量的那块内存“偷”过来，而不是重新开辟一块内存，然后再将之前的内容复制过来呢？</p><h2 id="移动语义（move-semantic）"><a href="#移动语义（move-semantic）" class="headerlink" title="移动语义（move semantic）"></a>移动语义（move semantic）</h2><p>铛铛铛铛！移动语义登场了！移动语义就是为了解决上面的这种问题而产生的。通过移动语义，我们可以在没有必要的时候避免复制。那么在接下来，我们就重点来谈一谈移动构造函数（move constructor）。相信到这里你已经意识到了，移动构造函数的出现就是为了解决复制构造函数的这个弊病。所以，其实移动构造函数应该和复制构造函数实现差不多的功能。那么，它也应该是一种构造函数的重载（好废的废话……）。所以，我们可以想象出来，其实移动构造函数大概就会是这个样子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">Test(&lt;KEYWORD&gt; t):<span class="hljs-built_in">arr</span>(t.arr)&#123;t.arr = nullptr;&#125;<br></code></pre></td></tr></table></figure><p>这里解释一下，通过移动构造函数，事实上我们是做了一个浅拷贝（shallow copy）。至于要将之前的指针置为空的原因在于，我们的类会在析构的时候delete掉我们的数组。那么我们浅拷贝出来的这个对象的成员变量（<code>arr</code>指针）就变成了一个悬挂指针（dangling pointer）。</p><p>好了，现在的问题变成了，这个<code>&lt;KEYWORD&gt;</code>究竟是什么？编译器如何自动判断到底应该调用复制构造函数<em>（我突然想起来这个东西的翻译貌似应该是拷贝构造函数，但是既然都已经写了这么多了，我就不改了）</em>还是移动构造函数呢？</p><h2 id="左值（lvalue）、右值（rvalue）、左值引用（lvalue-reference）和右值引用（rvalue-reference）"><a href="#左值（lvalue）、右值（rvalue）、左值引用（lvalue-reference）和右值引用（rvalue-reference）" class="headerlink" title="左值（lvalue）、右值（rvalue）、左值引用（lvalue reference）和右值引用（rvalue reference）"></a>左值（lvalue）、右值（rvalue）、左值引用（lvalue reference）和右值引用（rvalue reference）</h2><h3 id="左值和右值"><a href="#左值和右值" class="headerlink" title="左值和右值"></a>左值和右值</h3><p>为了回答上面的这个问题，我们首先需要明确左值和右值的概念。C++定义了与C不相同的左值和右值的判断方法，不过说起来非常简单：<strong>凡是真正的存在内存当中，而不是寄存器当中的值就是左值，其余的都是右值</strong>。其实更通俗一点的说法就是：<strong>凡是取地址（<code>&amp;</code>）操作可以成功的都是左值，其余都是右值</strong>。现在相信大家都已经知道左值和右值的关系了。我们来看几个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// lvalues:</span><br><span class="hljs-keyword">int</span> i = <span class="hljs-number">42</span>;<br>i = <span class="hljs-number">43</span>; <span class="hljs-comment">// ok, i is an lvalue </span><br><span class="hljs-keyword">int</span>* p = &amp;i; <span class="hljs-comment">// ok, i is an lvalue </span><br><span class="hljs-function"><span class="hljs-keyword">int</span>&amp; <span class="hljs-title">foo</span><span class="hljs-params">()</span></span>;<br><span class="hljs-built_in">foo</span>() = <span class="hljs-number">42</span>; <span class="hljs-comment">// ok, foo() is an lvalue</span><br><span class="hljs-keyword">int</span>* p1 = &amp;<span class="hljs-built_in">foo</span>(); <span class="hljs-comment">// ok, foo() is an lvalue</span><br><span class="hljs-comment">// rvalues: </span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">foobar</span><span class="hljs-params">()</span></span>; <br><span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;<br>j = <span class="hljs-built_in">foobar</span>(); <span class="hljs-comment">// ok, foobar() is an rvalue</span><br><span class="hljs-keyword">int</span> k = j + <span class="hljs-number">2</span>; <span class="hljs-comment">// ok, j+2 is an rvalue</span><br><span class="hljs-keyword">int</span>* p2 = &amp;<span class="hljs-built_in">foobar</span>(); <span class="hljs-comment">// error, cannot take the address of an rvalue </span><br>j = <span class="hljs-number">42</span>; <span class="hljs-comment">// ok, 42 is an rvalue</span><br></code></pre></td></tr></table></figure><p>那么，函数是不是就只可以作为右值呢？其实不是。考虑一个我们司空见惯的例子：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">vector</span>&lt;int&gt; vec = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br><span class="hljs-attribute">vec</span>[<span class="hljs-number">1</span>] = <span class="hljs-number">99</span>; // overloaded operator[]<br></code></pre></td></tr></table></figure><p>我们看到，其实<code>operator[]</code>是一个函数，其返回值依然可以作为左值。</p><h3 id="左值引用和右值引用"><a href="#左值引用和右值引用" class="headerlink" title="左值引用和右值引用"></a>左值引用和右值引用</h3><p>好了，在明确了左值和右值的关系之后，左值引用而右值引用的概念也就显而易见了。<strong>对于左值的引用就是左值引用，而对于右值的引用就是右值引用</strong>。虽然这么说，但是其实这个概念还并不是那么好理解。</p><p>事实上，不好理解的原因是我们之前从来没有真正的去区分过这两个概念，因为我们曾经将左值引用直接称为“引用”。也就是说，我们曾经一直用的<code>int&amp;</code>事实上是对于<code>int</code>类型左值的引用。而对于右值呢？在新标准当中我们使用<code>int&amp;&amp;</code>来表示。我们不妨看看几个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> &amp; i)</span> </span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;const int &amp; &quot;</span> &lt;&lt; i &lt;&lt; endl; &#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp; i)</span> </span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;int &amp; &quot;</span> &lt;&lt; i &lt;&lt; endl; &#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;&amp; i)</span> </span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;int &amp;&amp; &quot;</span> &lt;&lt; i &lt;&lt; endl; &#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> &amp;&amp; i)</span> </span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;const int &amp;&amp; &quot;</span> &lt;&lt; i &lt;&lt; endl; &#125; <span class="hljs-comment">// 这是个奇葩，我一会说</span><br></code></pre></td></tr></table></figure><p>我们在以往使用的时候大多会使用第一种形式。其实，第一种形式是一种神奇的形式，因为<code>const int &amp;</code>既可以绑定左值，也可以绑定右值。所以在没有后面三个重载函数的情况下，我们调用一下语句：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">int i = <span class="hljs-number">2</span><span class="hljs-comment">;</span><br>foo(i)<span class="hljs-comment">;</span><br>foo(<span class="hljs-number">2</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>他们的输出都是<code>const int &amp; 2</code>。而如果在只有第二个函数而没有其他函数的时候，第三条语句是违法的。在只有第三个函数没有其它函数的时候，第二条语句是违法的。所以我们总结一下：const reference可以绑定所有的值，而其他类型的引用只能绑定自己类型的值。在这四种函数都存在的情况下，每一种函数都会绑定与自己最接近的那个值。也就是说，在四个函数都存在的情况下，当我们再次运行上面的这段代码，输出的结果就将变成：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">int <span class="hljs-meta">&amp; 2</span><br>int <span class="hljs-meta">&amp;&amp; 2</span><br></code></pre></td></tr></table></figure><p>所以，当我们运行下面的语句：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livescript">foo(i);<br>foo(j);<br>foo(<span class="hljs-number">2</span>);<br>foo<span class="hljs-function"><span class="hljs-params">([]()-&gt;<span class="hljs-keyword">const</span> int &amp;&amp; &#123;<span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;&#125;())</span>;</span><br></code></pre></td></tr></table></figure><p>我们得到的结果将会是：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">int</span> &amp; <span class="hljs-number">2</span><br><span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span> &amp; <span class="hljs-number">2</span><br><span class="hljs-built_in">int</span> &amp;&amp; <span class="hljs-number">2</span><br><span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span> &amp;&amp; <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>这里解释一下第四个。第四条语句编译的时候会有Warning，提示”Returning reference to local temporary object”。想想也确实是这么个事情，不过它让我通过了，而且结果没错误。我觉得这个是不靠谱的。不过其实仔细考虑一下，常量右值引用其实不太能想出什么应用场景。所以个人认为，这只是贯彻C++标准当中”不应当组织程序员拿起枪射自己的脚“的精神，到不一定有什么实际意义，所以这个就不要纠结了。</p><p>相信现在大家已经能够对于左值、右值、左值引用和右值引用有一个准确的认识了。</p><h2 id="回到之前的问题"><a href="#回到之前的问题" class="headerlink" title="回到之前的问题"></a>回到之前的问题</h2><p>现在我们可以知道上面那个<code>Test</code>类当中的神奇的<code>&lt;KEYWORD&gt;</code>到底是什么了。其实他就是<code>Test &amp;&amp;</code>。由于左值和右值是两种不同的类型，所以可以依照这个类型进行重载。所以我们的<code>Test</code>类就变成了这样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> &#123;</span><br>    <span class="hljs-keyword">int</span> * arr&#123;<span class="hljs-literal">nullptr</span>&#125;;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Test</span>():<span class="hljs-built_in">arr</span>(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">5000</span>]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;) &#123; <br>    cout &lt;&lt; <span class="hljs-string">&quot;default constructor&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-built_in">Test</span>(<span class="hljs-keyword">const</span> Test &amp; t) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;copy constructor&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">if</span> (arr == <span class="hljs-literal">nullptr</span>) arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">5000</span>];<br>        <span class="hljs-built_in">memcpy</span>(arr, t.arr, <span class="hljs-number">5000</span>*<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">int</span>));<br>    &#125;<br>    <span class="hljs-built_in">Test</span>(Test &amp;&amp; t): <span class="hljs-built_in">arr</span>(t.arr) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;move constructor&quot;</span> &lt;&lt; endl;<br>        t.arr = <span class="hljs-literal">nullptr</span>;<br>    &#125;<br>    ~<span class="hljs-built_in">Test</span>()&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;destructor&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">delete</span> [] arr;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>所以，当我们再次考虑下面这个应用场景的时候：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">Test </span>createTest() &#123;<br>    return Test();<br>&#125;<br><br>int main() &#123;<br>    Test t(createTest());<br>&#125;<br></code></pre></td></tr></table></figure><p>我们会发现，打印的结果变成了：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">constructor</span></span><br><span class="hljs-function"><span class="hljs-title">move</span> <span class="hljs-title">constructor</span></span><br><span class="hljs-function"><span class="hljs-title">destructor</span></span><br><span class="hljs-function"><span class="hljs-title">move</span> <span class="hljs-title">constructor</span></span><br><span class="hljs-function"><span class="hljs-title">destructor</span></span><br><span class="hljs-function"><span class="hljs-title">destructor</span></span><br></code></pre></td></tr></table></figure><p>也就是说，我们的<code>Test</code>实例在工厂函数当中被使用默认构造函数（default constructor）构造一次之后，调用的全部都是移动构造函数，因为我们发现其实所有的这些值都是右值。这极大地节省了开支。</p><blockquote><p>这里有一个编译器的trick。gcc是一个丧心病狂的编译器，他会强制进行(N)RVO。如果你不做任何设置直接用GCC编译运行上面的代码，你将看到的是：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">constructor</span></span><br></code></pre></td></tr></table></figure><p>这个时候不要怀疑我上面说的东西有问题或者你写错了。请直接在gcc后面添加编译参数<code>-fno-elide-constructors</code>。所以整个的编译语句应该是：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">g++ -std=c++<span class="hljs-number">11</span> -fno-elide-constructors test.cpp <span class="hljs-meta"># for instance</span><br></code></pre></td></tr></table></figure></blockquote><h2 id="移动语义再多说几句"><a href="#移动语义再多说几句" class="headerlink" title="移动语义再多说几句"></a>移动语义再多说几句</h2><p>现在我们再来看看一开始那个<code>reusable</code>的例子。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">int main() &#123;<br>Test reusable;<br><span class="hljs-regexp">//</span> <span class="hljs-keyword">do</span> something to reusable<br>Test duplicated(reusable);<br><span class="hljs-regexp">//</span> <span class="hljs-keyword">do</span> something to reusable<br>&#125;<br></code></pre></td></tr></table></figure><p>如果现在我们不想复制<code>reusable</code>了，我们也想在构造<code>duplicated</code>的时候使用转移构造函数，那么应该怎么做呢？新标准给我们提供了一个解决方案：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">Test </span>duplicated(std::move(reusable));<br></code></pre></td></tr></table></figure><p>这个<code>std::move()</code>的作用是将左值转换为右值。不过这里要注意的一点是，如果我们在这里使用了<code>move</code>的话，那么后面我们就不能再对<code>reusable</code>进行操作了。因为转移构造函数已经将<code>reusable</code>的成员变量<code>arr</code>指针置为空了。</p><p>讲解完了转移构造函数，其实转移赋值语句（move assignment）与之同理，各位就自己研究一下吧。由于STL已经默认对所有的代码进行了右值引用的改写，所以现在当你运行你之前写过的代码时，你不需要做任何的更改，就会发现似乎更快了一些。</p><h2 id="进一步探讨左值和右值"><a href="#进一步探讨左值和右值" class="headerlink" title="进一步探讨左值和右值"></a>进一步探讨左值和右值</h2><p>我们来考虑下面的情景：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">void</span> <span class="hljs-function"><span class="hljs-title">doWork</span>(<span class="hljs-params">TYPE&amp;&amp; param</span>)</span> &#123;<br><span class="hljs-comment">// ops and expressions using std::move(param)</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这个代码是从Scott Meyers的演讲当中摘取的。现在的问题是：**<code>param</code>是右值吗？** 答案是：不！<code>param</code>是一个左值。</p><p>这里牵扯到一个概念，即事实上左值和右值与类型是没有关系的，即<code>int</code>既可以是左值，也可以是右值。区别左值和右值的唯一方法就是其定义，即<strong>能否取到地址</strong>。在这里，我们明显可以对<code>param</code>进行取地址操作，所以它是一个左值。也就是说，但凡有名字的“右值”，其实都是左值。这也就是为什么上面的代码当中鼓励大家对所有的变量使用<code>std::move()</code>转成右值的原因。</p><h2 id="完美转发（perfect-forward）又是在做什么"><a href="#完美转发（perfect-forward）又是在做什么" class="headerlink" title="完美转发（perfect forward）又是在做什么"></a>完美转发（perfect forward）又是在做什么</h2><p>我们依然考虑一个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">(T t)</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;in func&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">relay</span><span class="hljs-params">(T&amp;&amp; t)</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;in relay&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">func</span>(t);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">relay</span>(<span class="hljs-built_in">Test</span>());<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个例子当中，我们的期待是，我们在<code>main</code>当中调用<code>relay</code>，<code>Test</code>的临时对象作为一个右值传入<code>relay</code>，在<code>relay</code>当中又被转发给了<code>func</code>，那这时候转发给<code>func</code>的参数<code>t</code>也应当是一个右值。也就是说，我们希望：<strong>当<code>relay</code>的参数是右值的时候，<code>func</code>的参数也是右值；当<code>relay</code>的参数是左值的时候，<code>func</code>的参数也是左值</strong>。</p><p>那么现在我们来运行一下这个程序，我们会看到，结果与我们预想的似乎并不相同：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">constructor</span></span><br><span class="hljs-function"><span class="hljs-title">in</span> <span class="hljs-title">relay</span></span><br><span class="hljs-function"><span class="hljs-title">copy</span> <span class="hljs-title">constructor</span></span><br><span class="hljs-function"><span class="hljs-title">in</span> <span class="hljs-title">func</span></span><br><span class="hljs-function"><span class="hljs-title">destructor</span></span><br><span class="hljs-function"><span class="hljs-title">destructor</span></span><br></code></pre></td></tr></table></figure><p>我们看到，在<code>relay</code>当中转发的时候，调用了复制构造函数，也就是说编译器认为这个参数<code>t</code>并不是一个右值，而是左值。这个的原因已经在上一节将结果了，因为它有一个名字。那么如果我们想要实现我们所说的，如果传进来的参数是一个左值，则将它作为左值转发给下一个函数；如果它是右值，则将其作为右值转发给下一个函数，我们应该怎么做呢？</p><p>这时，我们需要<code>std::forward&lt;T&gt;()</code>。与<code>std::move()</code>相区别的是，<code>move()</code>会无条件的将一个参数转换成右值，而<code>forward()</code>则会保留参数的左右值类型。所以我们的代码应该是这样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">(T t)</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;in func &quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">relay</span><span class="hljs-params">(T&amp;&amp; t)</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;in relay &quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">func</span>(std::forward&lt;T&gt;(t));<br>&#125;<br></code></pre></td></tr></table></figure><p>现在运行的结果就成为了：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">constructor</span></span><br><span class="hljs-function"><span class="hljs-title">in</span> <span class="hljs-title">relay</span></span><br><span class="hljs-function"><span class="hljs-title">move</span> <span class="hljs-title">constructor</span></span><br><span class="hljs-function"><span class="hljs-title">in</span> <span class="hljs-title">func</span></span><br><span class="hljs-function"><span class="hljs-title">destructor</span></span><br><span class="hljs-function"><span class="hljs-title">destructor</span></span><br></code></pre></td></tr></table></figure><p>而如果我们的调用方法变成：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs excel"><span class="hljs-built_in">int</span> main() &#123;<br>    Test <span class="hljs-built_in">t</span>;<br>    relay(<span class="hljs-built_in">t</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>那么输出就会变成：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">constructor</span></span><br><span class="hljs-function"><span class="hljs-title">in</span> <span class="hljs-title">relay</span></span><br><span class="hljs-function"><span class="hljs-title">copy</span> <span class="hljs-title">constructor</span></span><br><span class="hljs-function"><span class="hljs-title">in</span> <span class="hljs-title">func</span></span><br><span class="hljs-function"><span class="hljs-title">destructor</span></span><br><span class="hljs-function"><span class="hljs-title">destructor</span></span><br></code></pre></td></tr></table></figure><p>完美地实现了我们所要的转发效果。</p><h2 id="通用引用（universal-reference）"><a href="#通用引用（universal-reference）" class="headerlink" title="通用引用（universal reference）"></a>通用引用（universal reference）</h2><p>现在一定有同学感到奇怪了，既然我刚才讲的完美转发就是怎么传进来怎么传给别人，那么也就是说在后面这个例子当中我们传进来的这个参数<code>t</code>竟然是一个左值！可是我们的参数表里不是写着<code>T&amp;&amp;</code>，要求接受一个右值吗？其实不是这样的。这里就牵扯到一个新的概念，叫做通用引用。</p><p>通用引用（universal reference）是Scott Meyers在<em>C++ and Beyond 2012</em>演讲中自创的一个词，用来特指一种引用的类型。构成通用引用有两个条件：</p><ol><li>必须满足<code>T&amp;&amp;</code>这种形式</li><li>类型<code>T</code>必须是通过推断得到的</li></ol><p>所以，在我们完美转发这个部分的例子当中，我们所使用的这种引用，其实是通用引用，而不是所谓的单纯的右值引用。因为我们的函数是模板函数，<code>T</code>的类型是推断出来的，而不是指定的。那么相应的，如果有一段这样的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestClass</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">(T&amp;&amp; t)</span> </span>&#123;&#125; <span class="hljs-comment">//这个T&amp;&amp;是不是一个通用引用呢</span><br>&#125;<br></code></pre></td></tr></table></figure><p>上面的这个<code>T</code>是不是通用引用呢？答案是不是。因为当这个类初始化的时候这个<code>T</code>就已经被确定了，不需要推断。</p><p>所以，可以构成通用引用的有如下几种可能：</p><ol><li><p>函数模板参数（function template parameters）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">(T&amp;&amp; param)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p><code>auto</code>声明（auto declaration）</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso">auto &amp;&amp; <span class="hljs-built_in">var</span> = <span class="hljs-params">...</span>;<br></code></pre></td></tr></table></figure></li><li><p><code>typedef</code>声明（typedef declaration）</p></li><li><p><code>decltype</code>声明（decltype declaration）</p></li></ol><p>那么，这个通用引用与其他的引用有什么区别呢？其实最重要的一点就是<em>引用类型合成</em>（Reference Collapsing Rules）。规则很简单：</p><ol><li><code>T&amp; &amp; =&gt; T&amp;</code></li><li><code>T&amp;&amp; &amp; =&gt; T&amp;</code></li><li><code>T&amp; &amp;&amp; =&gt; T&amp;</code></li><li><code>T&amp;&amp; &amp;&amp; =&gt; T&amp;&amp;</code></li></ol><p>简单一点说，就是<strong>传进来的如果是左值引用那就是左值引用，如果是右值引用那就是右值引用</strong>。但是注意，这个合成规则用户是不允许使用的，只有编译器才能够使用这种合成规则。这就是为什么上面的通用引用当中有一条要求是类型必须可以自动推导。这个合成规则其实就是类型推倒的规则之一。</p><p>这样，我们就可以知道为什么Scott Meyers在演讲中建议大家在通用引用的情境下，尽可能使用<code>forward()</code>了，因为这样可以在不改变语义的情况下提升性能。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">doWork</span><span class="hljs-params">(T &amp;&amp; param)</span> </span>&#123;<br><span class="hljs-comment">// ops and expressions using std::forward&lt;T&gt;(param)</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>C++0x通过引入许多新的语言特性来实现了语言性能的提升，使得本来就博大精深的一门语言变得更加的难以学习。但是一旦了解，就会被语言精妙的设计所折服。参考资料中给出了更多的关于左值、右值、左值引用、右值引用、移动语义和完美转发的例子。我自己实在是没有精力看完所有的这些资料了，各位有兴趣的话可以参阅。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="http://thbecker.net/articles/rvalue_references/section_01.html#section_01">http://thbecker.net/articles/rvalue_references/section_01.html#section_01</a></li><li><a href="http://blog.csdn.net/pongba/article/details/1697636">http://blog.csdn.net/pongba/article/details/1697636</a></li><li><a href="http://channel9.msdn.com/Shows/Going+Deep/Cpp-and-Beyond-2012-Scott-Meyers-Universal-References-in-Cpp11">http://channel9.msdn.com/Shows/Going+Deep/Cpp-and-Beyond-2012-Scott-Meyers-Universal-References-in-Cpp11</a></li><li><a href="https://isocpp.org/blog/2012/11/universal-references-in-c11-scott-meyers">https://isocpp.org/blog/2012/11/universal-references-in-c11-scott-meyers</a></li><li><a href="https://onedrive.live.com/view.aspx?resid=F1B8FF18A2AEC5C5!1062">https://onedrive.live.com/view.aspx?resid=F1B8FF18A2AEC5C5!1062</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库基础整理</title>
    <link href="/2021/05/29/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E6%95%B4%E7%90%86/"/>
    <url>/2021/05/29/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="数据库和SQL"><a href="#数据库和SQL" class="headerlink" title="数据库和SQL"></a>数据库和SQL</h2><ol><li><p>SQL语句及其种类</p><ul><li>DDL（Data Definition Language，数据定义语言） 用来创建或者删除存储数据用的数据库以及数据库中的表等对象。DDL 包含以下几种指令：<ul><li>CREATE： 创建数据库和表等对象</li><li>DROP： 删除数据库和表等对象</li><li>ALTER： 修改数据库和表等对象的结构</li></ul></li><li>DML（Data Manipulation Language，数据操纵语言） 用来查询或者变更表中的记录。DML 包含以下几种指令。<ul><li>SELECT：查询表中的数据</li><li>INSERT：向表中插入新数据</li><li>UPDATE：更新表中的数据</li><li>DELETE：删除表中的数据</li></ul></li><li>DCL（Data Control Language，数据控制语言） 用来确认或者取消对数据库中的数据进行的变更。除此之外，还可以对RDBMS 的用户是否有权限操作数据库中的对象（数据库表等）进行设定。DCL 包含以下几种指令。<ul><li>COMMIT： 确认对数据库中的数据进行的变更</li><li>ROLLBACK： 取消对数据库中的数据进行的变更</li><li>GRANT： 赋予用户操作权限</li><li>REVOKE： 取消用户的操作权限</li></ul></li></ul></li><li><p>SQL的基本书写规则</p><ul><li>SQL 不区分关键字的大小写。表名和列名也是如此。但是插入到表中的数据是区分大小写的。</li><li>字符串和日期常数需要使用单引号（’）括起来。</li><li>单词之间需要使用半角空格或者换行符进行分隔（不可使用全角空格分隔）。</li></ul><ol><li><p>创建数据库</p><blockquote><p>CREATE DATABASE &lt;数据库名称&gt;;  </p></blockquote></li><li><p>创建表</p><ul><li><p>基本格式</p><blockquote><p>CREATE TABLE &lt;表名&gt; </br><br>（&lt;列名1&gt; &lt;数据类型&gt; &lt;该列所需约束&gt;,</br><br>&lt;列名2&gt; &lt;数据类型&gt; &lt;该列所需约束&gt;，</br><br>&lt;列名3&gt; &lt;数据类型&gt; &lt;该列所需约束&gt;，</br><br>&lt;列名4&gt; &lt;数据类型&gt; &lt;该列所需约束&gt;，</br><br>.. .</br><br>&lt;该表的约束1&gt;， &lt;该表的约束2&gt;，……);  </p></blockquote></li><li><p>示例：</p><blockquote><p>CREATE TABLE Product </br><br>(product_id CHAR(4) NOT NULL,</br><br>product_name VARCHAR(100) NOT NULL,</br><br>product_type VARCHAR(32) NOT NULL,</br><br>sale_price INTEGER ,</br><br>purchase_price INTEGER ,</br><br>regist_date DATE ,</br><br>PRIMARY KEY (product_id));</br>  </p></blockquote></li><li><p>命名规则</p><ol><li>数据库名称、表名和列名等可以使用以下三种字符。<ul><li>半角英文字母</li><li>半角数字</li><li>下划线（_）</li></ul></li><li>名称必须以半角英文字母作为开头</li></ol></li><li><p>数据类型</p><ol><li>INTEGER型，用来指定存储整数的列的数据类型（数字型），不能存储小数</li><li>CHAR型，CHARACTER（字符）的缩写，是用来指定存储字符串的列的数据类型（字符型）。可以像CHAR(10) 或者CHAR(200)这样，在括号中指定该列可以存储的字符串的长度（最大长度）。字符串超出最大长度的部分是无法输入到该列中的，字符串以 定长字符串 的形式存储在被指定为CHAR 型的列中。所谓定长字符串，就是当列中存储的字符串长度达不到最大长度的时候，使用半角空格进行补足。</li><li>VARCHAR型，，VARCHAR 型也是用来指定存储字符串的列的数据类型（字符串类型），也可以通过括号内的数字来指定字符串的长度（最大长度）。但该类型的列是以 可变长字符串 的形式来保存字符串的。</li></ol></li><li><p>约束的设置</p><ol><li>主键约束，所谓键，就是在指定特定数据时使用的列的组合。键种类多样，主键（primary key）就是可以特定一行数据的列B。也就是说，如果把product_id 列指定为主键，就可以通过该列取出特定的商品数据了。  </li></ol></li></ul></li><li><p>表的删除和更新</p><ul><li><p>表删除 </p><blockquote><p>DROP TABLE &lt;表名&gt;；  </p></blockquote></li><li><p>表定义的更新</p><ul><li><p>添加列的ALTER TABLE语句</p><blockquote><p>ALTER TABLE &lt;表名&gt; ADD COLUMN &lt;列的定义&gt;；  </p></blockquote><p>特定的SQL Oracle 和SQL Server 中不用写COLUMN。</br></p><blockquote><p> ALTER TABLE &lt;表名&gt; ADD &lt;列名&gt; ；  </p></blockquote><p>另外，在Oracle 中同时添加多列的时候，可以像下面这样使用括号。  </p><blockquote><p>ALTER TABLE &lt;表名&gt; ADD （&lt;列名&gt;，&lt;列名&gt;，……）；</p></blockquote></li><li><p>删除列的ALTER TABLE语句</p><blockquote><p>ALTER TABLE &lt;表名&gt; DROP COLUMN &lt;列名&gt;；  </p></blockquote><p>特定的SQL Oracle 和SQL Server 中不用写COLUMN。</br></p><blockquote><p> ALTER TABLE &lt;表名&gt; DROP &lt;列名&gt; ；  </p></blockquote><p>另外，在Oracle 中同时添加多列的时候，可以像下面这样使用括号。  </p><blockquote><p>ALTER TABLE &lt;表名&gt; DROP （&lt;列名&gt;，&lt;列名&gt;，……）；  </p></blockquote></li></ul></li></ul></li></ol></li></ol><h2 id="查询基础"><a href="#查询基础" class="headerlink" title="查询基础"></a>查询基础</h2><ol><li><p>SELECT 基础  </p><ul><li><p>设定汉语别名时需要使用双引号（”）括起来    </p><blockquote><p>SELECT product_id AS “商品编号”,</br><br>product_name AS “商品名称”,</br><br>purchase_price AS “进货单价”</br><br>FROM Product;</p></blockquote></li><li><p>SELECT 子句中不仅可以书写列名，还可以书写常数。</p><blockquote><p>SELECT ‘商品’ AS string, 38 AS number, ‘2009-02-24’ AS date,<br>product_id, product_name<br>FROM Product;  </p></blockquote></li><li><p>想要删除重复行时，可以通过在SELECT 子句中使用 DISTINCT 来实现.</p><blockquote><p>SELECT DISTINCT product_type FROM Product;  </p></blockquote><p>在使用DISTINCT 时，NULL 也被视为一类数据。NULL 存在于多行中时，也会被合并为一条NULL 数据。</br><br>DISTINCT 也可以在多列之前使用。此时，会将多个列的数据进行组合，将重复的数据合并为一条</br><br><strong>DISTINCT 关键字只能用在第一个列名之前</strong></p></li><li><p>注释<br>1行注释：书写在“–”之后，只能写在同一行</br><br>多行注释： “*“，”*“</p></li></ul></li><li><p>算术运算符</p><ul><li><p>所有包含NULL 的计算，结果肯定是NULL。</p></li><li><p>比较运算符 =、&lt;&gt;、&gt;=、&gt;、&lt;=、&lt;</p></li><li><p>算术运算符 +、-、*、/</p></li><li><p>不能对NULL使用比较运算符（可以使用 IS NULL 运算符）</p><blockquote><p>SELECT product_name, purchase_price<br>FROM Product<br>WHERE purchase_price IS NULL;  </p></blockquote></li></ul></li><li><p>逻辑运算符<br>NOT、AND、OR</p></li></ol><h2 id="聚合与排序"><a href="#聚合与排序" class="headerlink" title="聚合与排序"></a>聚合与排序</h2><ol><li><p>对表进行聚合查询</p><ul><li><p>聚合函数</p><ul><li>COUNT： 计算表中的记录数（行数）</li><li>SUM： 计算表中数值列中数据的合计值</li><li>AVG： 计算表中数值列中数据的平均值</li><li>MAX： 求出表中任意列中数据的最大值</li><li>MIN： 求出表中任意列中数据的最小值<br>示例：</li></ul><ol><li>计算去除重复数据后的数据行数(想要计算值的种类时，可以在COUNT函数的参数中使用DISTINCT。)</li></ol><blockquote><p>SELECT COUNT(DISTINCT product_type) FROM Product;  </p></blockquote></li><li></li></ul></li><li><p>对表进行分组（GROUP BY）   </p><blockquote><p>SELECT &lt;列名1&gt;, &lt;列名2&gt;, &lt;列名3&gt;, ……<br>FROM &lt;表名&gt;<br>GROUP BY &lt;列名1&gt;, &lt;列名2&gt;, &lt;列名3&gt;, ……;  </p></blockquote><p>示例：按照商品种类统计数据行数</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">SELECT</span> product_<span class="hljs-keyword">type</span>, <span class="hljs-type">COUNT</span>(*)<br><span class="hljs-type">FROM</span> <span class="hljs-type">Product</span><br><span class="hljs-type">GROUP</span> <span class="hljs-type">BY</span> product_<span class="hljs-keyword">type</span>;<br></code></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">product_type | count</span><br><span class="hljs-section">--------------+------</span><br>衣服 | 2<br>办公用品 | 2<br>厨房用具 | 4<br></code></pre></td></tr></table></figure><p>GROUP BY 和WHERE 并用时SELECT 语句的执行顺序 FROM → WHERE → GROUP BY → SELECT<br>GROUP BY 使用注意事项： </p><ul><li><p>使用聚合函数时，SELECT 子句中只能存在以下三种元素：● 常数● 聚合函数● GROUP BY子句中指定的列名（也就是聚合键）。</p><blockquote><p>实际例子：select count(*), student_name from school group by gender 显然无法工作，count(*)和student_name数量不一致。</p></blockquote></li><li><p>在GROUP BY 子句中不能使用列的别名<br>错误示例：</p><blockquote><p>SELECT product_type AS pt, COUNT(*) FROM Product GROUP BY pt;  </p></blockquote><p>上述语句发生错误的原因之前已经介绍过了，是SQL 语句在DBMS<br>内部的执行顺序造成的——SELECT 子句在GROUP BY 子句之后执行。<br>在执行GROUP BY 子句时，SELECT 子句中定义的别名，DBMS 还并<br>不知道。  </p></li><li><p>只有SELECT 子句和HAVING 子句（以及之后将要学到的ORDER BY 子句）中能够使用COUNT 等聚合函数,WHERE 子句中不能使用聚合函数。<br>例如： </p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">SELECT</span> product_type, COUNT<span class="hljs-comment">(*)  FROM Product WHERE COUNT(*)</span> = <span class="hljs-number">2</span> <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> product_type;<br></code></pre></td></tr></table></figure><p>会报错:</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">ERROR: </span>不能在WHERE子句中使用聚合 行 3: WHERE COUNT(*) = 2<br></code></pre></td></tr></table></figure></li></ul></li><li><p>为聚合结果指定条件（HAVING）–通过指定条件选取特定组的方法</p><ul><li><p>HAVING子句语法如下：</p><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bnf">SELECT <span class="hljs-attribute">&lt;列名1&gt;</span>, <span class="hljs-attribute">&lt;列名2&gt;</span>, <span class="hljs-attribute">&lt;列名3&gt;</span>, ……<br>FROM <span class="hljs-attribute">&lt;表名&gt;</span><br>GROUP BY <span class="hljs-attribute">&lt;列名1&gt;</span>, <span class="hljs-attribute">&lt;列名2&gt;</span>, <span class="hljs-attribute">&lt;列名3&gt;</span>, ……<br>HAVING <span class="hljs-attribute">&lt;分组结果对应的条件&gt;</span><br></code></pre></td></tr></table></figure><p>HAVING 子句必须写在GROUP BY 子句之后，其在DBMS 内部的执行顺序也排在GROUP BY 子句之后。<br>使用HAVING 子句时SELECT 语句的顺序</p><blockquote><p>SELECT → FROM → WHERE → GROUP BY → HAVING  </p></blockquote><p>示例：</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">SELECT</span> product_type, COUNT<span class="hljs-comment">(*) FROM Product GROUP BY product_type HAVING COUNT(*)</span> = <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">product_type | count</span><br><span class="hljs-section">--------------+------</span><br>衣服 | 2<br>办公用品 | 2<br></code></pre></td></tr></table></figure></li><li><p>HAVING 子句中能够使用的3 种要素如下所示。</p><ul><li>常数</li><li>聚合函数</li><li>GROUP BY子句中指定的列名（即聚合键）–此处既能用WHERE也能用GROUP BY，最好用WHERE</li></ul></li></ul></li><li><p>对查询结果进行排序（ORDER BY）</p><ul><li><p>ORDER BY 语法</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">SELECT</span> &lt;列名<span class="hljs-number">1</span>&gt;, &lt;列名<span class="hljs-number">2</span>&gt;, &lt;列名<span class="hljs-number">3</span>&gt;, ……<br><span class="hljs-attribute">FROM</span> &lt;表名&gt;<br><span class="hljs-attribute"><span class="hljs-nomarkup">ORDER</span></span> BY &lt;排序基准列<span class="hljs-number">1</span>&gt;, &lt;排序基准列<span class="hljs-number">2</span>&gt;, ……<br></code></pre></td></tr></table></figure><p>子句的书写顺序:</p><blockquote><p> 1.SELECT 子句 → 2. FROM 子句 → 3. WHERE 子句 → 4. GROUP BY 子句 → 5. HAVING 子句 → 6. ORDER BY 子句  </p></blockquote><p>降序排列时，在列名后面使用DESC 关键字。</p></li><li><p>使用含有NULL 的列作为排序键时，NULL 会在结果的开头或末尾汇总显示。</p></li><li><p>在ORDER BY 子句中却是允许使用别名。</p></li><li><p>ORDER BY 子句中也可以使用存在于表中、但并不包含在SELECT子句之中的列。例如</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> product_name, sale_price, purchase_price<br>    <span class="hljs-keyword">FROM</span> Product<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> product_id;<br></code></pre></td></tr></table></figure></li><li><p>ORDER BY 可以使用聚合函数。例如：</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">SELECT</span> product_type, COUNT<span class="hljs-comment">(*)</span><br><span class="hljs-comment">FROM Product</span><br><span class="hljs-comment">GROUP BY product_type</span><br><span class="hljs-comment">ORDER BY COUNT(*)</span>;<br></code></pre></td></tr></table></figure></li></ul></li></ol><h2 id="数据更新"><a href="#数据更新" class="headerlink" title="数据更新"></a>数据更新</h2><ol><li><p>数据的插入</p><ul><li><p>INSERT 语法</p><blockquote><p>INSERT INTO &lt;表名&gt; (列1, 列2, 列3, ……) VALUES (值1, 值2, 值3, ……);   </p></blockquote><p>INSERT 语句中想给某一列赋予NULL 值时，可以直接在VALUES 子句的值清单中写入NULL。</p></li><li><p>插入默认值</p><ul><li><p>向表中插入默认值（初始值）<br>可以通过在创建表的 CREATE TABLE 语句中设置DEFAULT 约束来设定默认值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> ProductIns<br>(product_id <span class="hljs-type">CHAR</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>sale_price <span class="hljs-type">INTEGER</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>, <span class="hljs-comment">-- 销售单价的默认值设定为0;</span><br><span class="hljs-keyword">PRIMARY</span> KEY (product_id));<br></code></pre></td></tr></table></figure></li><li><p>通过显式方法插入默认值<br>在VALUES 子句中指定DEFAULT 关键字。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> ProductIns (product_id, product_name, product_type, <br>sale_price, purchase_price, regist_date) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;0007&#x27;</span>, <br><span class="hljs-string">&#x27;擦菜板&#x27;</span>, <span class="hljs-string">&#x27;厨房用具&#x27;</span>, <span class="hljs-keyword">DEFAULT</span>, <span class="hljs-number">790</span>, <span class="hljs-string">&#x27;2009-04-28&#x27;</span>);<br></code></pre></td></tr></table></figure><p>这样一来，RDBMS 就会在插入记录时自动把默认值赋给对应的列。<br>我们可以使用SELECT 语句来确认通过INSERT 语句插入的数据行。</p></li><li><p>通过隐式方法插入默认值<br>插入默认值时也可以不使用DEFAULT 关键字，只要在列清单和VALUES 中省略设定了默认值的列就可以了。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> ProductIns (product_id, product_name, product_type, <br>purchase_price, regist_date) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;0007&#x27;</span>,<br><span class="hljs-string">&#x27;擦菜板&#x27;</span>, <span class="hljs-string">&#x27;厨房用具&#x27;</span>, <span class="hljs-number">790</span>, <span class="hljs-string">&#x27;2009-04-28&#x27;</span>);<br></code></pre></td></tr></table></figure></li></ul></li><li><p>从其他表中复制数据<br>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 将商品表中的数据复制到商品复制表中</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> ProductCopy (product_id, product_name, product_type, <br>sale_price, purchase_price, regist_date)<br><span class="hljs-keyword">SELECT</span> product_id, product_name, product_type, sale_price, <br>purchase_price, regist_date<br><span class="hljs-keyword">FROM</span> Product;<br></code></pre></td></tr></table></figure><p>该INSERT 语句中的SELECT 语句，也可以使用WHERE 子句或者 GROUP BY 子句等。目前为止学到的各种SELECT 语句也都可以使用</p></li></ul></li><li><p>数据的删除</p><ul><li><p>删除数据的方法大概有以下两种：</p><ol><li> DROP TABLE 语句可以将表完全删除。</li><li> DELETE 语句会留下表（容器），而删除表中的全部数据。</li></ol></li><li><p>DELETE基本语法</p><blockquote><p>DELETE FROM &lt;表名&gt; WHERE &lt;条件&gt;;</p></blockquote></li></ul></li><li><p>数据的更新</p><ul><li><p>UPDATE基本语法： </p><blockquote><p>UPDATE &lt;表名&gt; SET &lt;列名&gt; = &lt;表达式&gt;;<br>UPDATE &lt;表名&gt; SET &lt;列名&gt; = &lt;表达式&gt; WHERE &lt;条件&gt;;  </p></blockquote></li><li><p>使用UPDATE 也可以将列更新为NULL（该更新俗称为NULL 清空）。此时只需要将赋值表达式右边的值直接写为NULL 即可.</p></li></ul></li><li><p>事务</p><ul><li><p>在RDBMS 中，事务是对表中数据进行更新的单位。简单来讲，事务就是 需要在同一个处理单元中执行的一系列更新处理的集合。</p></li><li><p>语法：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs abnf">事务开始语句<span class="hljs-comment">;</span><br>DML语句①<span class="hljs-comment">;</span><br>DML语句②<span class="hljs-comment">;</span><br>DML语句③<span class="hljs-comment">;</span><br>.. .<br>事务结束语句（COMMIT或者ROLLBACK）<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><ul><li><p>SQL Server、PostgreSQL</p><blockquote><p>BEGIN TRANSACTION  </p></blockquote></li><li><p>MySQL</p><blockquote><p>START TRANSACTION  </p></blockquote></li><li><p>Oracle、DB2</p><blockquote><p>无  </p></blockquote></li></ul></li><li><p>COMMMIT——提交处理</br><br>COMMIT 是提交事务包含的全部更新处理的结束指令，相当于文件处理中的覆盖保存。一旦提交，就无法恢复到事务开始前的状态了</p></li><li><p>ROLLBACK——取消处理</br><br>ROLLBACK 是取消事务包含的全部更新处理的结束指令，相当于文件处理中的放弃保存。一旦回滚，数据库就会恢复到事务开始之前的状态。</p></li><li><p>事务的特性<br>DBMS 的事务都遵循四种特性，将这四种特性的首字母结合起来统称为ACID 特性。</p><ul><li>原子性（Atomicity）<br>原子性是指在事务结束时，其中所包含的更新处理要么全部执行，要么完全不执行，也就是要么占有一切要么一无所有。</li><li>一致性（Consistency）<br>一致性指的是事务中包含的处理要满足数据库提前设置的约束，如主键约束或者NOT NULL 约束等。</li><li>隔离性（Isolation）<br>隔离性指的是保证不同事务之间互不干扰的特性。</li><li>持久性（Durability）<br>持久性也可以称为耐久性，指的是在事务（不论是提交还是回滚）结束后，DBMS 能够保证该时间点的数据状态会被保存的特性。</li></ul></li></ul></li></ol><h2 id="复杂查询"><a href="#复杂查询" class="headerlink" title="复杂查询"></a>复杂查询</h2><ol><li><p>视图<br><strong>视图中的数据会随着原表的变化自动更新</strong></p><ul><li><p>视图的优点：</p><ul><li>由于视图无需保存数据，因此可以节省存储设备的容量；</li><li>可以将频繁使用的SELECT 语句保存成视图，这样不用每次都重新书写了。</li></ul></li><li><p>视图的语法：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> 视图名称(&lt;视图列名<span class="hljs-number">1</span>&gt;, &lt;视图列名<span class="hljs-number">2</span>&gt;, ……)<br><span class="hljs-keyword">AS</span><br>&lt;<span class="hljs-keyword">SELECT</span>语句&gt;<br></code></pre></td></tr></table></figure></li><li><p>视图就是保存好的SELECT 语句。定义视图时可以使用任何SELECT 语句，既可以使用WHERE、GROUP BY、HAVING，也可以通过SELECT * 来指定全部列。但是,不能使用ORDER BY 子句。<br>如下示例中，使用ORDER BY子句定义出现错误</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">-- 不能像这样定义视图</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> ProductSum (product_type, cnt_product)<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> product_type, COUNT(*)<br><span class="hljs-keyword">FROM</span> Product<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> product_type<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> product_type;        以视图为基础创建视图定义视图时不能使用<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span>子句<br></code></pre></td></tr></table></figure></li><li><p>视图的限制</p><ul><li>定义视图时不能使用ORDER BY子句 ，见上文；</li><li>更新视图的限制<br>视图的更新在符合某些情况下可已进行（更新会同步到原表）<br>一些比较具有代表性的条件：<ul><li>SELECT 子句中未使用DISTINCT</li><li>FROM 子句中只有一张表</li><li>未使用GROUP BY 子句</li><li>未使用HAVING 子句</li></ul></li></ul></li><li><p>删除视图(DROP VIEW)<br>删除视图的语法</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">DROP</span> VIEW 视图名称(&lt;视图列名<span class="hljs-number">1</span>&gt;, &lt;视图列名<span class="hljs-number">2</span>&gt;, ……)<br></code></pre></td></tr></table></figure></li></ul></li><li><p>子查询   </p><ul><li><p>子查询就是一次性视图（SELECT语句）。与视图不同，子查询在SELECT语句执行完毕之后就会消失。</br><br>使用示例:</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> product_type, cnt_product<br><span class="hljs-keyword">FROM</span> (<br><span class="hljs-keyword">SELECT</span> Product_type, <span class="hljs-built_in">COUNT</span>(*) <span class="hljs-keyword">AS</span> cnt_product<br><span class="hljs-keyword">FROM</span> Product<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> product_type<br>) <span class="hljs-keyword">AS</span> ProductSum;<br></code></pre></td></tr></table></figure></li><li><p>由于子查询需要命名，因此需要根据处理内容来指定恰当的名称。<br>为子查询设定名称时需要使用AS关键字，该关键字有时也可以省略。其中也有像Oracle这样，在名称之前使用AS关键字就会发生错误的数据库。</p></li><li><p>标量子查询(限制：只能返回一行一列的结果，eg:10、’可以的’)</p><ul><li><p>由于返回的是单一的值，因此标量子查询的返回值可以用在= 或者&lt;&gt; 这样需要单一值的比较运算符之中。</p></li><li><p>场景示例1：<br>由于在WHERE子句中不能使用聚合函数，以下SQL语句是错误的：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">SELECT</span> product_id, <span class="hljs-built_in">product</span>＿<span class="hljs-keyword">name</span>, sale_price<br>FROM <span class="hljs-built_in">Product</span><br><span class="hljs-keyword">WHERE</span> sale_price &gt; AVG(sale_price);<br></code></pre></td></tr></table></figure><p>使用标量子查询，实现方法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> product_id, product_name, sale_price<br><span class="hljs-keyword">FROM</span> Product<br><span class="hljs-keyword">WHERE</span> sale_price <span class="hljs-operator">&gt;</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(sale_price)<br><span class="hljs-keyword">FROM</span> Product);<br></code></pre></td></tr></table></figure></li><li><p>场景示例2：<br>在SELECT子句中使用标量子查询</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> product_id,<br>product_name,<br>sale_price,<br>(<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(sale_price)<br><span class="hljs-keyword">FROM</span> Product) <span class="hljs-keyword">AS</span> avg_price<br><span class="hljs-keyword">FROM</span> Product;<br></code></pre></td></tr></table></figure></li><li><p>场景示例3：<br>在HAVING子句中使用标量子查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> product_type, <span class="hljs-built_in">AVG</span>(sale_price)<br><span class="hljs-keyword">FROM</span> Product<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> product_type<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">AVG</span>(sale_price) <span class="hljs-operator">&gt;</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(sale_price)<br><span class="hljs-keyword">FROM</span> Product);<br></code></pre></td></tr></table></figure></li><li><p>标量子查询的书写位置,不仅在WHERE 子句中，任何可以使用单一值的位置都可以使用。能够使用常数或者列名的地方，包括SELECT 子句、GROUP BY 子句、HAVING 子句、ORDER BY 子句，都可以使用。</p></li></ul></li></ul></li><li><p>关联子查询</p><ul><li><p>关联子查询会在细分的组内进行比较时使用。</p><ul><li><p>使用示例1：<br>由于子查询的返回值不是单个标量，因此以下写法错误</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">-- 发生错误的子查询</span><br><span class="hljs-keyword">SELECT</span> product_id, product_name, sale_price<br><span class="hljs-keyword">FROM</span> Product<br><span class="hljs-keyword">WHERE</span> sale_price &gt; (<span class="hljs-keyword">SELECT</span> AVG(sale_price)<br><span class="hljs-keyword">FROM</span> Product<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> product_type);<br></code></pre></td></tr></table></figure><p>使用关联子查询方法如下：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> product_type, product_name, sale_price<br>    <span class="hljs-keyword">FROM</span> Product <span class="hljs-keyword">AS</span> P1 <br><span class="hljs-keyword">WHERE</span> sale_price &gt; (<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(sale_price)<br>    <span class="hljs-keyword">FROM</span> Product <span class="hljs-keyword">AS</span> P2 <br>    <span class="hljs-keyword">WHERE</span> P1.product_type = P2.product_type<br>    <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> product_type);<br></code></pre></td></tr></table></figure></li></ul></li><li><p>关联子查询的结合条件一定要在子查询之中。</p><ul><li>原因：子查询内部设定的关联名称，只能在该子查询内部使用（“内部可以看到外部，而外部看不到内部”）。</li><li>举例说明：</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">-- 错误的关联子查询书写方法</span><br><span class="hljs-keyword">SELECT</span> product_type, product_name, sale_price<br><span class="hljs-keyword">FROM</span> Product <span class="hljs-keyword">AS</span> P1<br><span class="hljs-keyword">WHERE</span> P1.product_type = P2.product_type<br><span class="hljs-keyword">AND</span> sale_price &gt; (<span class="hljs-keyword">SELECT</span> AVG(sale_price)<br><span class="hljs-keyword">FROM</span> Product <span class="hljs-keyword">AS</span> P2<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> product_type);<br></code></pre></td></tr></table></figure><p>此处，子查询执行结束时只会留下执行结果，作为抽出源的P2 表其实已经不存在了。因此，在执行外层查询时，由于P2表已经不存在了，因此就会返回“不存在使用该名称的表”这样的错误</p></li></ul></li></ol><h2 id="函数、谓词、CASE表达式"><a href="#函数、谓词、CASE表达式" class="headerlink" title="函数、谓词、CASE表达式"></a>函数、谓词、CASE表达式</h2><ol><li><p>函数</p><ul><li><p>函数分类</p><ul><li>算术函数（用来进行数值计算的函数）</li><li>字符串函数（用来进行字符串操作的函数）</li><li>日期函数（用来进行日期操作的函数）</li><li>转换函数（用来转换数据类型和值的函数）</li><li>聚合函数（用来进行数据聚合的函数）</li></ul></li><li><p>算术函数</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>ABS(数值)</td><td>绝对值</td></tr><tr><td>MOD(被除数，除数)</td><td>求余</td></tr><tr><td>ROUND(对象数值，保留小数的位数)</td><td>四舍五入</td></tr></tbody></table></li><li><p>字符串函数</p><table><thead><tr><th>功能</th><th>函数</th></tr></thead><tbody><tr><td>字符串拼接</td><td>一般：字符串1||字符串2</br> MYSQL: CONCAT(str1, str2, str3)</td></tr><tr><td>字符串长度</td><td>LENGTH(字符串)</td></tr><tr><td>字符串小写转换</td><td>LOWER(字符串)</td></tr><tr><td>字符串大写转换</td><td>UPPER(字符串)</td></tr><tr><td>字符串替换</td><td>REPLACE(对象字符串，替换前的字符串，替换后的字符串)</td></tr><tr><td>字符串截取</td><td>SUBSTRING（对象字符串 FROM 截取的起始位置 FOR 截取的字符数）</td></tr></tbody></table></li><li><p>日期函数</p><table><thead><tr><th>功能</th><th>函数</th><th>示例</th></tr></thead><tbody><tr><td>当前日期（SQL执行的日期）</td><td>CURRENT_DATE</td><td>SELECT CURRENT_DATE;</br>返回:2020-02-21</td></tr><tr><td>当前时间</td><td>CURRENT_TIME</td><td>SELECT CURRENT_TIME;</br>返回：17:26:50.995+09</td></tr><tr><td>当前日期和时间</td><td>CURRENT_TIMESTAMP</td><td>SELECT CURRENT_TIMESTAMP; </br>返回：2016-04-25 18:31:03.704+09</td></tr><tr><td>截取日期元素</td><td>EXTRACT(日期元素 FROM 日期）</br>日期元素包括：year、month、day、hour、minute、second</td><td>SELECT EXTRACT(YEAR FROM CURRENT_TIMESTAMP) AS year；</br>返回： 2020</td></tr></tbody></table></li><li><p>类型转换函数</p><table><thead><tr><th>功能</th><th>函数</th><th>说明/示例</th></tr></thead><tbody><tr><td>类型转换</td><td>CAST（转换前的值 AS 想要转换的数据类型）</td><td>将字符串类型转换成日期：</br>SELECT CAST(‘2020-2-21’ AS DATE) AS date_col;</br>返回：2020-2-21</td></tr><tr><td>将NULL转换为其他值</td><td>COALESCE(数据1，数据2，数据3……)</td><td>返回可变参数中左侧开始第1 个不是NULL 的值。参数个数是可变的，因此可以根据需要无限增加。</td></tr></tbody></table></li></ul></li><li><p>谓词</p><ul><li><p>谓词就是返回值为真值的函数: LIKE； BETWEEN； IS NULL、IS NOT NULL； IN；EXISTS</p></li><li><p>LIKE —— 字符串的部分一致性<br>% 是代表“0 字符以上的任意字符串”的特殊符号,例如：%abc、abc%、%abc%</p></li><li><p>BETWEEN —— 范围查询<br>使用示例：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> product_name, sale_price<br><span class="hljs-keyword">FROM</span> Product<br><span class="hljs-keyword">WHERE</span> sale_price <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">100</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">1000</span>;<br></code></pre></td></tr></table></figure></li><li><p>IS NULL、IS NOT NULL —— 判断是否为NULL<br>使用示例：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> product_name, purchase_price<br><span class="hljs-keyword">FROM</span> Product<br><span class="hljs-keyword">WHERE</span> purchase_price <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>;<br></code></pre></td></tr></table></figure></li><li><p>IN、NOT IN —— OR有时的替代用法<br>使用示例：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">SELECT</span> product_name, purchase_price<br><span class="hljs-attribute">FROM</span> Product<br><span class="hljs-attribute">WHERE</span> purchase_price NOT IN (<span class="hljs-number">320</span>, <span class="hljs-number">500</span>, <span class="hljs-number">5000</span>);<br></code></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> product_name, sale_price<br><span class="hljs-keyword">FROM</span> Product<br><span class="hljs-keyword">WHERE</span> product_id <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> product_id<br><span class="hljs-keyword">FROM</span> ShopProduct<br><span class="hljs-keyword">WHERE</span> shop_id = <span class="hljs-string">&#x27;000C&#x27;</span>);<br></code></pre></td></tr></table></figure></li><li><p>EXIST —— 判断是否存在满足某种条件的记录<br>使用示例：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> product_name, sale_price<br>    <span class="hljs-keyword">FROM</span> Product <span class="hljs-keyword">AS</span> P <br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">EXISTS</span> (<span class="hljs-keyword">SELECT</span> *<br>    <span class="hljs-keyword">FROM</span> ShopProduct <span class="hljs-keyword">AS</span> SP <br>    <span class="hljs-keyword">WHERE</span> SP.shop_id = <span class="hljs-string">&#x27;000C&#x27;</span><br>    <span class="hljs-keyword">AND</span> SP.product_id = P.product_id);<br></code></pre></td></tr></table></figure></li></ul></li><li><p>CASE表达式</p><ol><li><p>搜索CASE表达式</p><ul><li><p>搜索CASE表达式语法</br><br>CASE表达式会从对最初的WHEN子句中的“&lt; 求值表达式&gt;”进行求值开始执行如果结果<br>为真（TRUE），那么就返回THEN 子句中的表达式，CASE 表达式的执行到此为止。如果结果不为真，那么就跳转到下一条WHEN 子句的求值之中。如果直到最后的WHEN 子句为止返回结果都不为真，那么就会返回ELSE中的表达式，执行终止。</p>  <figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bnf">CASE    WHEN <span class="hljs-attribute">&lt;求值表达式&gt;</span> THEN <span class="hljs-attribute">&lt;表达式&gt;</span><br>        WHEN <span class="hljs-attribute">&lt;求值表达式&gt;</span> THEN <span class="hljs-attribute">&lt;表达式&gt;</span><br>        WHEN <span class="hljs-attribute">&lt;求值表达式&gt;</span> THEN <span class="hljs-attribute">&lt;表达式&gt;</span><br>        .. .<br>        ELSE <span class="hljs-attribute">&lt;表达式&gt;</span><br>END<br></code></pre></td></tr></table></figure><p>  使用示例：</p>  <figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> product_name,<br><span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> product_type = <span class="hljs-string">&#x27;衣服&#x27;</span><br><span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;A ：&#x27;</span> | | product_type<br><span class="hljs-keyword">WHEN</span> product_type = <span class="hljs-string">&#x27;办公用品&#x27;</span><br><span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;B ：&#x27;</span> | | product_type<br><span class="hljs-keyword">WHEN</span> product_type = <span class="hljs-string">&#x27;厨房用具&#x27;</span><br><span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;C ：&#x27;</span> | | product_type<br><span class="hljs-keyword">ELSE</span> <span class="hljs-literal">NULL</span><br><span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> abc_product_type<br><span class="hljs-keyword">FROM</span> Product;<br></code></pre></td></tr></table></figure></li><li><p>ELSE 子句如果省略不写，会被默认为ELSE NULL。</p></li><li><p>CASE 表达式最后的“END”不可省略。</p></li></ul></li><li><p>简单CASE表达式</br><br>简单CASE表达式比搜索CASE表达式简单，但是会受到条件的约束，因此通常情况下都会使用搜索CASE 表达式。</p><ul><li><p>简单CASE表达式语法</br></p><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bnf">CASE <span class="hljs-attribute">&lt;表达式&gt;</span><br>    WHEN <span class="hljs-attribute">&lt;表达式&gt;</span> THEN <span class="hljs-attribute">&lt;表达式&gt;</span><br>    WHEN <span class="hljs-attribute">&lt;表达式&gt;</span> THEN <span class="hljs-attribute">&lt;表达式&gt;</span><br>    WHEN <span class="hljs-attribute">&lt;表达式&gt;</span> THEN <span class="hljs-attribute">&lt;表达式&gt;</span><br>    .. .<br>    ELSE <span class="hljs-attribute">&lt;表达式&gt;</span><br>END<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> product_name,<br><span class="hljs-keyword">CASE</span> product_type<br>    <span class="hljs-keyword">WHEN</span> <span class="hljs-string">&#x27;衣服&#x27;</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;A ：&#x27;</span> | | product_type<br>    <span class="hljs-keyword">WHEN</span> <span class="hljs-string">&#x27;办公用品&#x27;</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;B ：&#x27;</span> | | product_type<br>    <span class="hljs-keyword">WHEN</span> <span class="hljs-string">&#x27;厨房用具&#x27;</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;C ：&#x27;</span> | | product_type<br>    <span class="hljs-keyword">ELSE</span> <span class="hljs-literal">NULL</span><br>    <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> abc_product_type<br><span class="hljs-keyword">FROM</span> Product;<br></code></pre></td></tr></table></figure></li></ul></li></ol></li></ol><h2 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h2><p>集合：指的是记录的集合。具体来说，表、视图和查询的执行结果都是记录的集合。</p><h3 id="交并差集运算"><a href="#交并差集运算" class="headerlink" title="交并差集运算"></a>交并差集运算</h3><pre><code>注意事项：1. 作为运算对象的记录的列数、每一列的类型必须相同2. ORDER BY子句只能在最后使用一次</code></pre><ol><li><p>UNION ———— 并集</p><ul><li><p>基本语法示例</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> product_id, product_name<br><span class="hljs-keyword">FROM</span> Product<br><span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">SELECT</span> product_id, product_name<br><span class="hljs-keyword">FROM</span> Product2;<br></code></pre></td></tr></table></figure></li><li><p>保留重复行<br>在UNION 后面添加ALL 关键字。</p></li></ul></li><li><p>INTERSECT ———— 交集<br>选取两个记录集合中公共部分</p><ul><li><p>基本语法示例</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Oracle <span class="hljs-keyword">SQL</span> <span class="hljs-keyword">Server</span> DB2 PostgreSQL<br><span class="hljs-keyword">SELECT</span> product_id, product_name<br><span class="hljs-keyword">FROM</span> Product<br><span class="hljs-keyword">INTERSECT</span><br><span class="hljs-keyword">SELECT</span> product_id, product_name<br><span class="hljs-keyword">FROM</span> Product2<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> product_id;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>EXCEPT ———— 差集 (ORACLE中关键词为MINUS)</p><ul><li><p>基本语法  </p><ul><li><p>一般数据库示例：<br>结果为Product 表中记录除去Product2表中记录之后的剩余部分。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> product_id, product_name<br><span class="hljs-keyword">FROM</span> Product<br><span class="hljs-keyword">EXCEPT</span><br><span class="hljs-keyword">SELECT</span> product_id, product_name<br><span class="hljs-keyword">FROM</span> Product2<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> product_id;<br></code></pre></td></tr></table></figure></li><li><p>oracle示例</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> …<br><span class="hljs-keyword">FROM</span> …<br><span class="hljs-keyword">MINUS</span><br><span class="hljs-keyword">SELECT</span> …<br><span class="hljs-keyword">FROM</span> …;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ol><h3 id="联结"><a href="#联结" class="headerlink" title="联结"></a>联结</h3><p>联结（JOIN）就是将其他表中的列添加过来，进行“添加列”的集合运算。UNION是以行（纵向）为单位进行操作，而联结则是以列（横向）为单位进行的。所谓联结运算，一言以蔽之，就是“以A中的列作为桥梁，将B中满足同样条件的列汇集到同一结果之中”。</p><ol><li><p>INNER JOIN ———— 内联结</p><ul><li>基本语法示例1：</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">SELECT <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SP</span>.</span></span>shop_id, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SP</span>.</span></span>shop_name, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SP</span>.</span></span>product_id, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">P</span>.</span></span>product_name, <br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">P</span>.</span></span>sale_price<br>FROM ShopProduct AS SP INNER JOIN Product AS P <br>ON <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SP</span>.</span></span>product_id = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">P</span>.</span></span>product_id<br>WHERE <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SP</span>.</span></span>shop_id = &#x27;<span class="hljs-number">000</span>A&#x27;;<br></code></pre></td></tr></table></figure><ul><li>FROM子句包含多张表，使用关键字INNER JOIN 将两表联结，别名SP 、P非必需。</li><li>在ON 之后指定两张表联结所使用的列（联结键）（product_id）。ON 是专门用来指定联结条件的，它能起到与WHERE 相同的作用。需要指定多个键时，同样可<br>以使用AND、OR。<strong>在进行内联结时ON 子句是必不可少的</strong>（如果没有ON会发生错误），并且ON 必须书写在FROM 和WHERE 之间。</li></ul></li><li><p>OUTER JOIN ———— 外联结<br>用法与INNER JOIN相同，区别在于：内联结的结果只包含多张表都有的数据，外联结的结果包含主表的所有数据。（显然，外联结的结果数&gt;=内联结的结果数）</p><ul><li><p>外联结指定主表的关键字是LEFT 和RIGHT。，使用LEFT 时FROM子句中写在左侧的表是主表，使用RIGHT时右侧的表是主表。<br>下面两个语句，结果相同：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">-- 右侧的表，也就是Product 表是主表<br>SELECT <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SP</span>.</span></span>shop_id, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SP</span>.</span></span>shop_name, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SP</span>.</span></span>product_id, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">P</span>.</span></span>product_name, <br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">P</span>.</span></span>sale_price<br>FROM ShopProduct AS SP RIGHT OUTER JOIN Product AS P<br>ON <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SP</span>.</span></span>product_id = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">P</span>.</span></span>product_id;<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">-- 左侧的表，也就是Product表是主表<br>SELECT <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SP</span>.</span></span>shop_id, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SP</span>.</span></span>shop_name, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SP</span>.</span></span>product_id, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">P</span>.</span></span>product_name, <br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">P</span>.</span></span>sale_price<br>FROM Product AS P LEFT OUTER JOIN ShopProduct AS SP ①<br>ON <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SP</span>.</span></span>product_id = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">P</span>.</span></span>product_id;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>两表以上联结<br>示例代码：</p> <figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">SELECT <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SP</span>.</span></span>shop_id, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SP</span>.</span></span>shop_name, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SP</span>.</span></span>product_id, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">P</span>.</span></span>product_name, <br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">P</span>.</span></span>sale_price<br>FROM ShopProduct AS SP INNER JOIN Product AS P<br>ON <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SP</span>.</span></span>product_id = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">P</span>.</span></span>product_id<br>INNER JOIN InventoryProduct AS IP<br>ON <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SP</span>.</span></span>product_id = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">IP</span>.</span></span>product_id<br></code></pre></td></tr></table></figure></li></ol><h2 id="窗口函数-OLAP-函数"><a href="#窗口函数-OLAP-函数" class="headerlink" title="窗口函数(OLAP 函数)"></a>窗口函数(OLAP 函数)</h2><p>OLAP 是OnLine Analytical Processing 的简称，意思是对数据库数据进行实时分析处理。</p><ul><li><p>窗口函数基本语法</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;窗口函数&gt; <span class="hljs-keyword">OVER</span> ([<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> &lt;列清单&gt;]<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> &lt;排序用列清单&gt;)<br></code></pre></td></tr></table></figure></li><li><p>窗口函数包括：</p><ul><li>所有的聚合函数都能用作窗口函数，其语法和专用窗口函数相同（SUM、AVG、COUNT、MAX、MIN）；</li><li>RANK、DENSE_RANK、ROW_NUMBER 等专用窗口函数</li></ul></li></ul><ol><li><p>RUANK函数 ———— 记录排序  </p><ul><li><p>PARTITION BY 设定排序的对象范围。</p></li><li><p>ORDER BY 指定按照哪一列、何种顺序进行排序。</p></li><li><p>使用示例：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> product_name, product_type, sale_price,<br>RANK () <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> product_type<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> sale_price) <span class="hljs-keyword">AS</span> ranking<br><span class="hljs-keyword">FROM</span> Product;<br></code></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">product_name |<span class="hljs-string"> product_type </span>|<span class="hljs-string"> sale_price </span>|<span class="hljs-string"> ranking</span><br><span class="hljs-string">------------+--------------+-------------+--------</span><br><span class="hljs-string">叉子 </span>|<span class="hljs-string"> 厨房用具 </span>|<span class="hljs-string"> 500 </span>|<span class="hljs-string"> 1</span><br><span class="hljs-string">擦菜板 </span>|<span class="hljs-string"> 厨房用具 </span>|<span class="hljs-string"> 880 </span>|<span class="hljs-string"> 2</span><br><span class="hljs-string">菜刀 </span>|<span class="hljs-string"> 厨房用具 </span>|<span class="hljs-string"> 3000 </span>|<span class="hljs-string"> 3</span><br><span class="hljs-string">高压锅 </span>|<span class="hljs-string"> 厨房用具 </span>|<span class="hljs-string"> 6800 </span>|<span class="hljs-string"> 4</span><br><span class="hljs-string">T恤衫 </span>|<span class="hljs-string"> 衣服 </span>|<span class="hljs-string"> 1000 </span>|<span class="hljs-string"> 1</span><br><span class="hljs-string">运动T恤 </span>|<span class="hljs-string"> 衣服 </span>|<span class="hljs-string"> 4000 </span>|<span class="hljs-string"> 2</span><br><span class="hljs-string">圆珠笔 </span>|<span class="hljs-string"> 办公用品 </span>|<span class="hljs-string"> 100 </span>|<span class="hljs-string"> 1</span><br><span class="hljs-string">打孔器 </span>|<span class="hljs-string"> 办公用品 </span>|<span class="hljs-string"> 500 </span>|<span class="hljs-string"> 2</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>SUM 函数作为窗口函数</p><ul><li><p>使用示例</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> product_id, product_name, sale_price,<br>　<span class="hljs-built_in">SUM</span> (sale_price) <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> product_id) <span class="hljs-keyword">AS</span> current_sum<br><span class="hljs-keyword">FROM</span> Product;<br></code></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">product_id |<span class="hljs-string"> product_name </span>|<span class="hljs-string"> sale_price </span>|<span class="hljs-string"> current_sum</span><br><span class="hljs-string">----------+-----------+-------------+------------</span><br><span class="hljs-string">0001 </span>|<span class="hljs-string"> T恤衫 </span>|<span class="hljs-string"> 1000 </span>|<span class="hljs-string"> 1000 ←1000</span><br><span class="hljs-string">0002 </span>|<span class="hljs-string"> 打孔器 </span>|<span class="hljs-string"> 500 </span>|<span class="hljs-string"> 1500 ←1000+500</span><br><span class="hljs-string">0003 </span>|<span class="hljs-string"> 运动T恤 </span>|<span class="hljs-string"> 4000 </span>|<span class="hljs-string"> 5500 ←1000+500+4000</span><br><span class="hljs-string">0004 </span>|<span class="hljs-string"> 菜刀 </span>|<span class="hljs-string"> 3000 </span>|<span class="hljs-string"> 8500 ←1000+500+4000+3000</span><br><span class="hljs-string">0005 </span>|<span class="hljs-string"> 高压锅 </span>|<span class="hljs-string"> 6800 </span>|<span class="hljs-string"> 15300</span><br><span class="hljs-string">0006 </span>|<span class="hljs-string"> 叉子 </span>|<span class="hljs-string"> 500 </span>|<span class="hljs-string"> 15800</span><br><span class="hljs-string">0007 </span>|<span class="hljs-string"> 擦菜板 </span>|<span class="hljs-string"> 880 </span>|<span class="hljs-string"> 16680</span><br><span class="hljs-string">0008 </span>|<span class="hljs-string"> 圆珠笔 </span>|<span class="hljs-string"> 100 </span>|<span class="hljs-string"> 16780</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>计算移动平均</p><ul><li>使用示例</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">--指定“最靠近的3行”作为汇总对象</span><br><span class="hljs-keyword">SELECT</span> product_id, product_name, sale_price,<br>AVG (sale_price) <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> product_id<br><span class="hljs-keyword">ROWS</span> <span class="hljs-number">2</span> <span class="hljs-keyword">PRECEDING</span>) <span class="hljs-keyword">AS</span> moving_avg<br><span class="hljs-keyword">FROM</span> Product;<br></code></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">product_id</span> <span class="hljs-string">product_name</span> <span class="hljs-string">sale_price</span> <span class="hljs-string">moving_avg</span><br><span class="hljs-string">-----------</span> <span class="hljs-string">-------------</span> <span class="hljs-string">-------------</span> <span class="hljs-string">------------</span><br><span class="hljs-number">0001 </span><span class="hljs-string">T恤衫</span> <span class="hljs-number">1000 </span><span class="hljs-number">1000</span> <span class="hljs-string">←(1000)/1</span><br><span class="hljs-number">0002</span> <span class="hljs-string">打孔器</span> <span class="hljs-number">500</span> <span class="hljs-number">750</span> <span class="hljs-string">←(1000+500)/2</span><br><span class="hljs-number">0003</span> <span class="hljs-string">运动T恤</span> <span class="hljs-number">4000 </span><span class="hljs-number">1833</span> <span class="hljs-string">←(1000+500+4000)/3</span><br><span class="hljs-number">0004</span> <span class="hljs-string">菜刀</span> <span class="hljs-number">3000 </span><span class="hljs-number">2500</span> <span class="hljs-string">←(500+4000+3000)/3</span><br><span class="hljs-number">0005</span> <span class="hljs-string">高压锅</span> <span class="hljs-number">6800 </span><span class="hljs-number">4600</span> <span class="hljs-string">←(4000+3000+6800)/3</span><br><span class="hljs-number">0006</span> <span class="hljs-string">叉子</span> <span class="hljs-number">500</span> <span class="hljs-number">3433</span><br><span class="hljs-number">0007</span> <span class="hljs-string">擦菜板</span> <span class="hljs-number">880</span> <span class="hljs-number">2726</span><br><span class="hljs-number">0008</span> <span class="hljs-string">圆珠笔</span> <span class="hljs-number">100</span> <span class="hljs-number">493</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="GROUPING运算符"><a href="#GROUPING运算符" class="headerlink" title="GROUPING运算符"></a>GROUPING运算符</h2><p>用于小计、合计，不常用</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
