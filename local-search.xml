<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>数据库基础整理</title>
    <link href="/2021/05/29/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E6%95%B4%E7%90%86/"/>
    <url>/2021/05/29/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="数据库和SQL"><a href="#数据库和SQL" class="headerlink" title="数据库和SQL"></a>数据库和SQL</h2><ol><li><p>SQL语句及其种类</p><ul><li>DDL（Data Definition Language，数据定义语言） 用来创建或者删除存储数据用的数据库以及数据库中的表等对象。DDL 包含以下几种指令：<ul><li>CREATE： 创建数据库和表等对象</li><li>DROP： 删除数据库和表等对象</li><li>ALTER： 修改数据库和表等对象的结构</li></ul></li><li>DML（Data Manipulation Language，数据操纵语言） 用来查询或者变更表中的记录。DML 包含以下几种指令。<ul><li>SELECT：查询表中的数据</li><li>INSERT：向表中插入新数据</li><li>UPDATE：更新表中的数据</li><li>DELETE：删除表中的数据</li></ul></li><li>DCL（Data Control Language，数据控制语言） 用来确认或者取消对数据库中的数据进行的变更。除此之外，还可以对RDBMS 的用户是否有权限操作数据库中的对象（数据库表等）进行设定。DCL 包含以下几种指令。<ul><li>COMMIT： 确认对数据库中的数据进行的变更</li><li>ROLLBACK： 取消对数据库中的数据进行的变更</li><li>GRANT： 赋予用户操作权限</li><li>REVOKE： 取消用户的操作权限</li></ul></li></ul></li><li><p>SQL的基本书写规则</p><ul><li>SQL 不区分关键字的大小写。表名和列名也是如此。但是插入到表中的数据是区分大小写的。</li><li>字符串和日期常数需要使用单引号（’）括起来。</li><li>单词之间需要使用半角空格或者换行符进行分隔（不可使用全角空格分隔）。</li></ul><ol><li><p>创建数据库</p><blockquote><p>CREATE DATABASE &lt;数据库名称&gt;;  </p></blockquote></li><li><p>创建表</p><ul><li><p>基本格式</p><blockquote><p>CREATE TABLE &lt;表名&gt; </br><br>（&lt;列名1&gt; &lt;数据类型&gt; &lt;该列所需约束&gt;,</br><br>&lt;列名2&gt; &lt;数据类型&gt; &lt;该列所需约束&gt;，</br><br>&lt;列名3&gt; &lt;数据类型&gt; &lt;该列所需约束&gt;，</br><br>&lt;列名4&gt; &lt;数据类型&gt; &lt;该列所需约束&gt;，</br><br>.. .</br><br>&lt;该表的约束1&gt;， &lt;该表的约束2&gt;，……);  </p></blockquote></li><li><p>示例：</p><blockquote><p>CREATE TABLE Product </br><br>(product_id CHAR(4) NOT NULL,</br><br>product_name VARCHAR(100) NOT NULL,</br><br>product_type VARCHAR(32) NOT NULL,</br><br>sale_price INTEGER ,</br><br>purchase_price INTEGER ,</br><br>regist_date DATE ,</br><br>PRIMARY KEY (product_id));</br>  </p></blockquote></li><li><p>命名规则</p><ol><li>数据库名称、表名和列名等可以使用以下三种字符。<ul><li>半角英文字母</li><li>半角数字</li><li>下划线（_）</li></ul></li><li>名称必须以半角英文字母作为开头</li></ol></li><li><p>数据类型</p><ol><li>INTEGER型，用来指定存储整数的列的数据类型（数字型），不能存储小数</li><li>CHAR型，CHARACTER（字符）的缩写，是用来指定存储字符串的列的数据类型（字符型）。可以像CHAR(10) 或者CHAR(200)这样，在括号中指定该列可以存储的字符串的长度（最大长度）。字符串超出最大长度的部分是无法输入到该列中的，字符串以 定长字符串 的形式存储在被指定为CHAR 型的列中。所谓定长字符串，就是当列中存储的字符串长度达不到最大长度的时候，使用半角空格进行补足。</li><li>VARCHAR型，，VARCHAR 型也是用来指定存储字符串的列的数据类型（字符串类型），也可以通过括号内的数字来指定字符串的长度（最大长度）。但该类型的列是以 可变长字符串 的形式来保存字符串的。</li></ol></li><li><p>约束的设置</p><ol><li>主键约束，所谓键，就是在指定特定数据时使用的列的组合。键种类多样，主键（primary key）就是可以特定一行数据的列B。也就是说，如果把product_id 列指定为主键，就可以通过该列取出特定的商品数据了。  </li></ol></li></ul></li><li><p>表的删除和更新</p><ul><li>表删除 <blockquote><p>DROP TABLE &lt;表名&gt;；  </p></blockquote></li><li>表定义的更新<ul><li>添加列的ALTER TABLE语句<blockquote><p>ALTER TABLE &lt;表名&gt; ADD COLUMN &lt;列的定义&gt;；  </p></blockquote>  特定的SQL Oracle 和SQL Server 中不用写COLUMN。</br><blockquote><p> ALTER TABLE &lt;表名&gt; ADD &lt;列名&gt; ；  </p></blockquote>  另外，在Oracle 中同时添加多列的时候，可以像下面这样使用括号。  <blockquote><p>ALTER TABLE &lt;表名&gt; ADD （&lt;列名&gt;，&lt;列名&gt;，……）；</p></blockquote></li><li>删除列的ALTER TABLE语句<blockquote><p>ALTER TABLE &lt;表名&gt; DROP COLUMN &lt;列名&gt;；  </p></blockquote>  特定的SQL Oracle 和SQL Server 中不用写COLUMN。</br><blockquote><p> ALTER TABLE &lt;表名&gt; DROP &lt;列名&gt; ；  </p></blockquote>  另外，在Oracle 中同时添加多列的时候，可以像下面这样使用括号。  <blockquote><p>ALTER TABLE &lt;表名&gt; DROP （&lt;列名&gt;，&lt;列名&gt;，……）；  </p></blockquote></li></ul></li></ul></li></ol></li></ol><h2 id="查询基础"><a href="#查询基础" class="headerlink" title="查询基础"></a>查询基础</h2><ol><li><p>SELECT 基础  </p><ul><li>设定汉语别名时需要使用双引号（”）括起来    <blockquote><p>SELECT product_id AS “商品编号”,</br></p><pre><code>  product_name AS &quot;商品名称&quot;,&lt;/br&gt;  purchase_price AS &quot;进货单价&quot;&lt;/br&gt;</code></pre><p>  FROM Product;</p></blockquote></li><li>SELECT 子句中不仅可以书写列名，还可以书写常数。<blockquote><p>SELECT ‘商品’ AS string, 38 AS number, ‘2009-02-24’ AS date,</p><pre><code>  product_id, product_name  FROM Product;    </code></pre></blockquote></li><li>想要删除重复行时，可以通过在SELECT 子句中使用 DISTINCT 来实现.<blockquote><p>SELECT DISTINCT product_type FROM Product;  </p></blockquote>  在使用DISTINCT 时，NULL 也被视为一类数据。NULL 存在于多行中时，也会被合并为一条NULL 数据。</br><br>  DISTINCT 也可以在多列之前使用。此时，会将多个列的数据进行组合，将重复的数据合并为一条</br><br>  <strong>DISTINCT 关键字只能用在第一个列名之前</strong></li><li>注释<br>  1行注释：书写在“–”之后，只能写在同一行</br><br>  多行注释： “*“，”*“</li></ul></li><li><p>算术运算符</p><ul><li>所有包含NULL 的计算，结果肯定是NULL。</li><li>比较运算符 =、&lt;&gt;、&gt;=、&gt;、&lt;=、&lt;</li><li>算术运算符 +、-、*、/</li><li>不能对NULL使用比较运算符（可以使用 IS NULL 运算符）<blockquote><p>SELECT product_name, purchase_price<br>FROM Product<br>WHERE purchase_price IS NULL;  </p></blockquote></li></ul></li><li><p>逻辑运算符<br> NOT、AND、OR</p><h2 id="聚合与排序"><a href="#聚合与排序" class="headerlink" title="聚合与排序"></a>聚合与排序</h2></li><li><p>对表进行聚合查询</p><ul><li>聚合函数<ul><li>COUNT： 计算表中的记录数（行数）</li><li>SUM： 计算表中数值列中数据的合计值</li><li>AVG： 计算表中数值列中数据的平均值</li><li>MAX： 求出表中任意列中数据的最大值</li><li>MIN： 求出表中任意列中数据的最小值<br>示例：</li></ul><ol><li>计算去除重复数据后的数据行数(想要计算值的种类时，可以在COUNT函数的参数中使用DISTINCT。)<blockquote><p>SELECT COUNT(DISTINCT product_type) FROM Product;  </p></blockquote></li></ol></li><li></li></ul></li><li><p>对表进行分组（GROUP BY）   </p><blockquote><p>SELECT &lt;列名1&gt;, &lt;列名2&gt;, &lt;列名3&gt;, ……<br> FROM &lt;表名&gt;<br> GROUP BY &lt;列名1&gt;, &lt;列名2&gt;, &lt;列名3&gt;, ……;  </p></blockquote><p> 示例：按照商品种类统计数据行数</p> <figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">SELECT</span> product_<span class="hljs-keyword">type</span>, <span class="hljs-type">COUNT</span>(*)<br><span class="hljs-type">FROM</span> <span class="hljs-type">Product</span><br><span class="hljs-type">GROUP</span> <span class="hljs-type">BY</span> product_<span class="hljs-keyword">type</span>;<br></code></pre></td></tr></table></figure><p> 执行结果：</p> <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"> product_type | count<br> <span class="hljs-comment">--------------+------</span><br> 衣服 | <span class="hljs-number">2</span><br> 办公用品 | <span class="hljs-number">2</span><br> 厨房用具 | <span class="hljs-number">4</span><br> ```   <br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> 和<span class="hljs-keyword">WHERE</span> 并用时<span class="hljs-keyword">SELECT</span> 语句的执行顺序 <span class="hljs-keyword">FROM</span> → <span class="hljs-keyword">WHERE</span> → <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> → <span class="hljs-keyword">SELECT</span>  <br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> 使用注意事项： <br> * 使用聚合函数时，<span class="hljs-keyword">SELECT</span> 子句中只能存在以下三种元素：● 常数● 聚合函数● <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span>子句中指定的列名（也就是聚合键）。<br>     &gt; 实际例子：<span class="hljs-keyword">select</span> count(\*), student_name <span class="hljs-keyword">from</span> school <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> gender 显然无法工作，count(\*)和student_name数量不一致。<br> <br> * 在<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> 子句中不能使用列的别名<br>     错误示例：<br>     &gt; <span class="hljs-keyword">SELECT</span> product_type <span class="hljs-keyword">AS</span> pt, COUNT(*) <span class="hljs-keyword">FROM</span> Product <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> pt;  <br>     <br>     上述语句发生错误的原因之前已经介绍过了，是<span class="hljs-keyword">SQL</span> 语句在DBMS<br>     内部的执行顺序造成的——<span class="hljs-keyword">SELECT</span> 子句在<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> 子句之后执行。<br>     在执行<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> 子句时，<span class="hljs-keyword">SELECT</span> 子句中定义的别名，DBMS 还并<br>     不知道。  <br> * 只有<span class="hljs-keyword">SELECT</span> 子句和<span class="hljs-keyword">HAVING</span> 子句（以及之后将要学到的<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> 子句）中能够使用COUNT 等聚合函数,<span class="hljs-keyword">WHERE</span> 子句中不能使用聚合函数。<br>     例如： <br></code></pre></td></tr></table></figure><pre><code> SELECT product_type, COUNT(*)  FROM Product WHERE COUNT(*) = 2 GROUP BY product_type; <figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile">    <br><span class="hljs-section">会报错:</span><br></code></pre></td></tr></table></figure> ERROR: 不能在WHERE子句中使用聚合 行 3: WHERE COUNT(*) = 2 <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">3.</span> 为聚合结果指定条件（<span class="hljs-keyword">HAVING</span>）<span class="hljs-comment">--通过指定条件选取特定组的方法</span><br>    * <span class="hljs-keyword">HAVING</span>子句语法如下：<br></code></pre></td></tr></table></figure> SELECT &lt;列名1&gt;, &lt;列名2&gt;, &lt;列名3&gt;, …… FROM &lt;表名&gt; GROUP BY &lt;列名1&gt;, &lt;列名2&gt;, &lt;列名3&gt;, …… HAVING &lt;分组结果对应的条件&gt; <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">HAVING</span> 子句必须写在<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> 子句之后，其在DBMS 内部的执行顺序也排在<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> 子句之后。<br>使用<span class="hljs-keyword">HAVING</span> 子句时<span class="hljs-keyword">SELECT</span> 语句的顺序<br>&gt; <span class="hljs-keyword">SELECT</span> → <span class="hljs-keyword">FROM</span> → <span class="hljs-keyword">WHERE</span> → <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> → <span class="hljs-keyword">HAVING</span>  <br><br>示例：<br></code></pre></td></tr></table></figure> SELECT product_type, COUNT(*) FROM Product GROUP BY product_type HAVING COUNT(*) = 2; <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">执行结果<br></code></pre></td></tr></table></figure> product_type | count --------------+------ 衣服 | 2 办公用品 | 2 <figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">    * HAVING 子句中能够使用的<span class="hljs-number">3</span> 种要素如下所示。<br>        * 常数<br>        * 聚合函数<br>        * <span class="hljs-keyword">GROUP</span> <span class="hljs-title">BY</span>子句中指定的列名（即聚合键）--此处既能用WHERE也能用<span class="hljs-keyword">GROUP</span> <span class="hljs-title">BY</span>，最好用WHERE<br><span class="hljs-number">4</span>. 对查询结果进行排序（<span class="hljs-keyword">ORDER</span> <span class="hljs-title">BY</span>）<br>    * <span class="hljs-keyword">ORDER</span> <span class="hljs-title">BY</span> 语法<br></code></pre></td></tr></table></figure> SELECT &lt;列名1&gt;, &lt;列名2&gt;, &lt;列名3&gt;, …… FROM &lt;表名&gt; ORDER BY &lt;排序基准列1&gt;, &lt;排序基准列2&gt;, …… <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">    子句的书写顺序:<br>    &gt;  <span class="hljs-number">1.</span><span class="hljs-keyword">SELECT</span> 子句 → <span class="hljs-number">2.</span> <span class="hljs-keyword">FROM</span> 子句 → <span class="hljs-number">3.</span> <span class="hljs-keyword">WHERE</span> 子句 → <span class="hljs-number">4.</span> <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> 子句 → <span class="hljs-number">5.</span> <span class="hljs-keyword">HAVING</span> 子句 → <span class="hljs-number">6.</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> 子句  <br>    <br>    降序排列时，在列名后面使用<span class="hljs-keyword">DESC</span> 关键字。<br>* 使用含有<span class="hljs-keyword">NULL</span> 的列作为排序键时，<span class="hljs-keyword">NULL</span> 会在结果的开头或末尾汇总显示。<br>* 在<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> 子句中却是允许使用别名。<br>* <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> 子句中也可以使用存在于表中、但并不包含在<span class="hljs-keyword">SELECT</span>子句之中的列。例如<br></code></pre></td></tr></table></figure> SELECT product_name, sale_price, purchase_price     FROM Product ORDER BY product_id; <figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">* <span class="hljs-keyword">ORDER</span> <span class="hljs-title">BY</span> 可以使用聚合函数。例如：<br></code></pre></td></tr></table></figure> SELECT product_type, COUNT(*) FROM Product GROUP BY product_type ORDER BY COUNT(*); <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">## 数据更新<br><span class="hljs-number">1.</span> 数据的插入<br>    <span class="hljs-operator">*</span> <span class="hljs-keyword">INSERT</span> 语法<br>        <span class="hljs-operator">&gt;</span> <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-operator">&lt;</span>表名<span class="hljs-operator">&gt;</span> (列<span class="hljs-number">1</span>, 列<span class="hljs-number">2</span>, 列<span class="hljs-number">3</span>, ……) <span class="hljs-keyword">VALUES</span> (值<span class="hljs-number">1</span>, 值<span class="hljs-number">2</span>, 值<span class="hljs-number">3</span>, ……);   <br><br>        <span class="hljs-keyword">INSERT</span> 语句中想给某一列赋予<span class="hljs-keyword">NULL</span> 值时，可以直接在<span class="hljs-keyword">VALUES</span> 子句的值清单中写入<span class="hljs-keyword">NULL</span>。<br>    <span class="hljs-operator">*</span> 插入默认值<br>        <span class="hljs-operator">*</span> 向表中插入默认值（初始值）  <br>            可以通过在创建表的 <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 语句中设置<span class="hljs-keyword">DEFAULT</span> 约束来设定默认值<br></code></pre></td></tr></table></figure>     CREATE TABLE ProductIns     (product_id CHAR(4) NOT NULL,     sale_price INTEGER DEFAULT 0, -- 销售单价的默认值设定为0;     PRIMARY KEY (product_id));     <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">* 通过显式方法插入默认值<br>    在<span class="hljs-keyword">VALUES</span> 子句中指定<span class="hljs-keyword">DEFAULT</span> 关键字。<br></code></pre></td></tr></table></figure>     INSERT INTO ProductIns (product_id, product_name, product_type,      sale_price, purchase_price, regist_date) VALUES (&#39;0007&#39;,      &#39;擦菜板&#39;, &#39;厨房用具&#39;, DEFAULT, 790, &#39;2009-04-28&#39;);     <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">    这样一来，RDBMS 就会在插入记录时自动把默认值赋给对应的列。<br>    我们可以使用<span class="hljs-keyword">SELECT</span> 语句来确认通过<span class="hljs-keyword">INSERT</span> 语句插入的数据行。<br>* 通过隐式方法插入默认值<br>    插入默认值时也可以不使用<span class="hljs-keyword">DEFAULT</span> 关键字，只要在列清单和<span class="hljs-keyword">VALUES</span> 中省略设定了默认值的列就可以了。<br></code></pre></td></tr></table></figure>     INSERT INTO ProductIns (product_id, product_name, product_type,      purchase_price, regist_date) VALUES (&#39;0007&#39;,     &#39;擦菜板&#39;, &#39;厨房用具&#39;, 790, &#39;2009-04-28&#39;);     <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span>从其他表中复制数据<br><span class="hljs-code">    示例：</span><br></code></pre></td></tr></table></figure> -- 将商品表中的数据复制到商品复制表中 INSERT INTO ProductCopy (product_id, product_name, product_type,  sale_price, purchase_price, regist_date) SELECT product_id, product_name, product_type, sale_price,  purchase_price, regist_date FROM Product; <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">        该<span class="hljs-keyword">INSERT</span> 语句中的<span class="hljs-keyword">SELECT</span> 语句，也可以使用<span class="hljs-keyword">WHERE</span> 子句或者 <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> 子句等。目前为止学到的各种<span class="hljs-keyword">SELECT</span> 语句也都可以使用<br><span class="hljs-number">2.</span> 数据的删除<br>    * 删除数据的方法大概有以下两种：<br>        <span class="hljs-number">1.</span>  <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> 语句可以将表完全删除。<br>        <span class="hljs-number">2.</span> <span class="hljs-keyword">DELETE</span> 语句会留下表（容器），而删除表中的全部数据。<br>    * <span class="hljs-keyword">DELETE</span>基本语法<br>        &gt; <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> &lt;表名&gt; <span class="hljs-keyword">WHERE</span> &lt;条件&gt;;<br>    <br><span class="hljs-number">3.</span> 数据的更新<br>    * <span class="hljs-keyword">UPDATE</span>基本语法： <br>        &gt; <span class="hljs-keyword">UPDATE</span> &lt;表名&gt; <span class="hljs-keyword">SET</span> &lt;列名&gt; = &lt;表达式&gt;;   <br>        &gt; <span class="hljs-keyword">UPDATE</span> &lt;表名&gt; <span class="hljs-keyword">SET</span> &lt;列名&gt; = &lt;表达式&gt; <span class="hljs-keyword">WHERE</span> &lt;条件&gt;;  <br><br>    * 使用<span class="hljs-keyword">UPDATE</span> 也可以将列更新为<span class="hljs-keyword">NULL</span>（该更新俗称为<span class="hljs-keyword">NULL</span> 清空）。此时只需要将赋值表达式右边的值直接写为<span class="hljs-keyword">NULL</span> 即可.<br><span class="hljs-number">4.</span> 事务<br>    * 在RDBMS 中，事务是对表中数据进行更新的单位。简单来讲，事务就是 需要在同一个处理单元中执行的一系列更新处理的集合。<br>    * 语法：<br></code></pre></td></tr></table></figure> 事务开始语句; DML语句①; DML语句②; DML语句③; .. . 事务结束语句（COMMIT或者ROLLBACK）; <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-comment">        * SQL Server、PostgreSQL</span><br>            &gt; BEGIN TRANSACTION  <br>            <br><span class="hljs-comment">        * MySQL</span><br>            &gt; START TRANSACTION  <br>            <br><span class="hljs-comment">        * Oracle、DB2</span><br>            &gt; 无  <br>            <br><span class="hljs-comment">    * COMMMIT——提交处理&lt;/br&gt;</span><br>        COMMIT 是提交事务包含的全部更新处理的结束指令，相当于文件处理中的覆盖保存。一旦提交，就无法恢复到事务开始前的状态了<br><span class="hljs-comment">    * ROLLBACK——取消处理&lt;/br&gt;</span><br>        ROLLBACK 是取消事务包含的全部更新处理的结束指令，相当于文件处理中的放弃保存。一旦回滚，数据库就会恢复到事务开始之前的状态。<br><span class="hljs-comment">    * 事务的特性</span><br>        DBMS 的事务都遵循四种特性，将这四种特性的首字母结合起来统称为ACID 特性。<br><span class="hljs-comment">        * 原子性（Atomicity）</span><br>            原子性是指在事务结束时，其中所包含的更新处理要么全部执行，要么完全不执行，也就是要么占有一切要么一无所有。<br><span class="hljs-comment">        * 一致性（Consistency）</span><br>            一致性指的是事务中包含的处理要满足数据库提前设置的约束，如主键约束或者NOT NULL 约束等。<br><span class="hljs-comment">        * 隔离性（Isolation）</span><br>            隔离性指的是保证不同事务之间互不干扰的特性。<br><span class="hljs-comment">        * 持久性（Durability）</span><br>            持久性也可以称为耐久性，指的是在事务（不论是提交还是回滚）结束后，DBMS 能够保证该时间点的数据状态会被保存的特性。<br>## 复杂查询<br>1. 视图  <br><span class="hljs-comment">    **视图中的数据会随着原表的变化自动更新**</span><br><span class="hljs-comment">    * 视图的优点：</span><br><span class="hljs-comment">        * 由于视图无需保存数据，因此可以节省存储设备的容量；</span><br><span class="hljs-comment">        * 可以将频繁使用的SELECT 语句保存成视图，这样不用每次都重新书写了。</span><br><span class="hljs-comment">    * 视图的语法：</span><br></code></pre></td></tr></table></figure> CREATE VIEW 视图名称(&lt;视图列名1&gt;, &lt;视图列名2&gt;, ……) AS &lt;SELECT语句&gt; <figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">* 视图就是保存好的<span class="hljs-keyword">SELECT</span> 语句。定义视图时可以使用任何<span class="hljs-keyword">SELECT</span> 语句，既可以使用<span class="hljs-keyword">WHERE</span>、<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span>、<span class="hljs-keyword">HAVING</span>，也可以通过<span class="hljs-keyword">SELECT</span> * 来指定全部列。但是,不能使用<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> 子句。<br>    如下示例中，使用<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span>子句定义出现错误<br></code></pre></td></tr></table></figure> -- 不能像这样定义视图 CREATE VIEW ProductSum (product_type, cnt_product) AS SELECT product_type, COUNT(*) FROM Product GROUP BY product_type ORDER BY product_type;        以视图为基础创建视图定义视图时不能使用ORDER BY子句 <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">* 视图的限制<br>    * 定义视图时不能使用<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span>子句 ，见上文；<br>    * 更新视图的限制<br>        视图的更新在符合某些情况下可已进行（更新会同步到原表）<br>        一些比较具有代表性的条件：<br>        * <span class="hljs-keyword">SELECT</span> 子句中未使用<span class="hljs-keyword">DISTINCT</span><br>        * <span class="hljs-keyword">FROM</span> 子句中只有一张表<br>        * 未使用<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> 子句<br>        * 未使用<span class="hljs-keyword">HAVING</span> 子句<br>* 删除视图(<span class="hljs-keyword">DROP</span> <span class="hljs-keyword">VIEW</span>)<br>    删除视图的语法<br></code></pre></td></tr></table></figure> DROP VIEW 视图名称(&lt;视图列名1&gt;, &lt;视图列名2&gt;, ……) <figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-number">2</span>. 子查询   <br>    * 子查询就是一次性视图（<span class="hljs-keyword">SELECT</span>语句）。与视图不同，子查询在<span class="hljs-keyword">SELECT</span>语句执行完毕之后就会消失。&lt;/br&gt;<br>        使用示例:<br></code></pre></td></tr></table></figure> SELECT product_type, cnt_product FROM ( SELECT Product_type, COUNT(*) AS cnt_product FROM Product GROUP BY product_type ) AS ProductSum; <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-comment">* 由于子查询需要命名，因此需要根据处理内容来指定恰当的名称。  </span><br>    为子查询设定名称时需要使用<span class="hljs-keyword">AS</span>关键字，该关键字有时也可以省略。其中也有像Oracle这样，在名称之前使用<span class="hljs-keyword">AS</span>关键字就会发生错误的数据库。<br><span class="hljs-comment">* 标量子查询(限制：只能返回一行一列的结果，eg:10、&#x27;可以的&#x27;)</span><br><span class="hljs-comment">    * 由于返回的是单一的值，因此标量子查询的返回值可以用在= 或者&lt;&gt; 这样需要单一值的比较运算符之中。</span><br><span class="hljs-comment">    * 场景示例1：</span><br>        由于在WHERE子句中不能使用聚合函数，以下SQL语句是错误的：<br></code></pre></td></tr></table></figure>     SELECT product_id, product＿name, sale_price     FROM Product     WHERE sale_price &gt; AVG(sale_price);     <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">使用标量子查询，实现方法如下：<br></code></pre></td></tr></table></figure>     SELECT product_id, product_name, sale_price     FROM Product     WHERE sale_price &gt; (SELECT AVG(sale_price)     FROM Product);     <figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">* 场景示例<span class="hljs-number">2</span>：<br>    在<span class="hljs-keyword">SELECT</span>子句中使用标量子查询<br></code></pre></td></tr></table></figure>     SELECT product_id,     product_name,     sale_price,     (SELECT AVG(sale_price)     FROM Product) AS avg_price     FROM Product;     <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span>场景示例3：<br><span class="hljs-code">    在HAVING子句中使用标量子查询</span><br></code></pre></td></tr></table></figure>     SELECT product_type, AVG(sale_price)     FROM Product     GROUP BY product_type     HAVING AVG(sale_price) &gt; (SELECT AVG(sale_price)     FROM Product);     <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">        * 标量子查询的书写位置,不仅在<span class="hljs-keyword">WHERE</span> 子句中，任何可以使用单一值的位置都可以使用。能够使用常数或者列名的地方，包括<span class="hljs-keyword">SELECT</span> 子句、<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> 子句、<span class="hljs-keyword">HAVING</span> 子句、<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> 子句，都可以使用。<br><span class="hljs-number">3.</span> 关联子查询<br>    * 关联子查询会在细分的组内进行比较时使用。<br>        * 使用示例<span class="hljs-number">1</span>：<br>            由于子查询的返回值不是单个标量，因此以下写法错误<br></code></pre></td></tr></table></figure>     -- 发生错误的子查询     SELECT product_id, product_name, sale_price     FROM Product     WHERE sale_price &gt; (SELECT AVG(sale_price)     FROM Product     GROUP BY product_type);     <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">使用关联子查询方法如下：<br></code></pre></td></tr></table></figure>     SELECT product_type, product_name, sale_price         FROM Product AS P1      WHERE sale_price &gt; (SELECT AVG(sale_price)         FROM Product AS P2          WHERE P1.product_type = P2.product_type         GROUP BY product_type);     <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> 关联子查询的结合条件一定要在子查询之中。<br><span class="hljs-bullet">    *</span> 原因：子查询内部设定的关联名称，只能在该子查询内部使用（“内部可以看到外部，而外部看不到内部”）。<br><span class="hljs-bullet">    *</span> 举例说明：<br></code></pre></td></tr></table></figure> -- 错误的关联子查询书写方法 SELECT product_type, product_name, sale_price FROM Product AS P1 WHERE P1.product_type = P2.product_type AND sale_price &gt; (SELECT AVG(sale_price) FROM Product AS P2 GROUP BY product_type); <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs sql">        此处，子查询执行结束时只会留下执行结果，作为抽出源的P2 表其实已经不存在了。因此，在执行外层查询时，由于P2表已经不存在了，因此就会返回“不存在使用该名称的表”这样的错误<br>## 函数、谓词、<span class="hljs-keyword">CASE</span>表达式 <br><span class="hljs-number">1.</span> 函数<br>    <span class="hljs-operator">*</span> 函数分类<br>        <span class="hljs-operator">*</span> 算术函数（用来进行数值计算的函数）<br>        <span class="hljs-operator">*</span> 字符串函数（用来进行字符串操作的函数）<br>        <span class="hljs-operator">*</span> 日期函数（用来进行日期操作的函数）<br>        <span class="hljs-operator">*</span> 转换函数（用来转换数据类型和值的函数）<br>        <span class="hljs-operator">*</span> 聚合函数（用来进行数据聚合的函数）<br>    <span class="hljs-operator">*</span> 算术函数<br>        函数 <span class="hljs-operator">|</span>  功能<br>        <span class="hljs-comment">---------------------- | -------</span><br>        <span class="hljs-built_in">ABS</span>(数值)             <span class="hljs-operator">|</span>            绝对值<br>        <span class="hljs-built_in">MOD</span>(被除数，除数)      <span class="hljs-operator">|</span>           求余<br>        ROUND(对象数值，保留小数的位数) <span class="hljs-operator">|</span>  四舍五入<br>    <span class="hljs-operator">*</span> 字符串函数<br>        功能 <span class="hljs-operator">|</span> 函数<br>        <span class="hljs-comment">------------ | ---------------------------</span><br>        字符串拼接 <span class="hljs-operator">|</span> 一般：字符串<span class="hljs-number">1</span>\<span class="hljs-operator">|</span>\<span class="hljs-operator">|</span>字符串<span class="hljs-number">2</span><span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>br<span class="hljs-operator">&gt;</span> MYSQL: CONCAT(str1, str2, str3)<br>        字符串长度 <span class="hljs-operator">|</span> LENGTH(字符串)<br>        字符串小写转换 <span class="hljs-operator">|</span> <span class="hljs-built_in">LOWER</span>(字符串)<br>        字符串大写转换 <span class="hljs-operator">|</span> <span class="hljs-built_in">UPPER</span>(字符串)<br>        字符串替换 <span class="hljs-operator">|</span> REPLACE(对象字符串，替换前的字符串，替换后的字符串)<br>        字符串截取 <span class="hljs-operator">|</span> SUBSTRING（对象字符串 <span class="hljs-keyword">FROM</span> 截取的起始位置 <span class="hljs-keyword">FOR</span> 截取的字符数）<br>    <span class="hljs-operator">*</span> 日期函数<br>        功能 <span class="hljs-operator">|</span> 函数 <span class="hljs-operator">|</span> 示例<br>        <span class="hljs-comment">------------- | ----------------------- | ------------------</span><br>        当前日期（<span class="hljs-keyword">SQL</span>执行的日期） <span class="hljs-operator">|</span> <span class="hljs-built_in">CURRENT_DATE</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">CURRENT_DATE</span>;<span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>br<span class="hljs-operator">&gt;</span>返回:<span class="hljs-number">2020</span><span class="hljs-number">-02</span><span class="hljs-number">-21</span><br>        当前时间 <span class="hljs-operator">|</span> <span class="hljs-built_in">CURRENT_TIME</span>  <span class="hljs-operator">|</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">CURRENT_TIME</span>;<span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>br<span class="hljs-operator">&gt;</span>返回：<span class="hljs-number">17</span>:<span class="hljs-number">26</span>:<span class="hljs-number">50.995</span><span class="hljs-operator">+</span><span class="hljs-number">09</span><br>        当前日期和时间 <span class="hljs-operator">|</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>; <span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>br<span class="hljs-operator">&gt;</span>返回：<span class="hljs-number">2016</span><span class="hljs-number">-04</span><span class="hljs-number">-25</span> <span class="hljs-number">18</span>:<span class="hljs-number">31</span>:<span class="hljs-number">03.704</span><span class="hljs-operator">+</span><span class="hljs-number">09</span><br>        截取日期元素 <span class="hljs-operator">|</span> <span class="hljs-built_in">EXTRACT</span>(日期元素 <span class="hljs-keyword">FROM</span> 日期）<span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>br<span class="hljs-operator">&gt;</span>日期元素包括：<span class="hljs-keyword">year</span>、<span class="hljs-keyword">month</span>、<span class="hljs-keyword">day</span>、<span class="hljs-keyword">hour</span>、<span class="hljs-keyword">minute</span>、<span class="hljs-keyword">second</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">EXTRACT</span>(<span class="hljs-keyword">YEAR</span> <span class="hljs-keyword">FROM</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>) <span class="hljs-keyword">AS</span> <span class="hljs-keyword">year</span>；<span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>br<span class="hljs-operator">&gt;</span>返回： <span class="hljs-number">2020</span><br>        <br>    <span class="hljs-operator">*</span> 类型转换函数<br>        功能 <span class="hljs-operator">|</span> 函数 <span class="hljs-operator">|</span> 说明<span class="hljs-operator">/</span>示例<br>        <span class="hljs-comment">--------- | ----------------------------- | -------</span><br>        类型转换 <span class="hljs-operator">|</span> CAST（转换前的值 <span class="hljs-keyword">AS</span> 想要转换的数据类型） <span class="hljs-operator">|</span> 将字符串类型转换成日期：<span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>br<span class="hljs-operator">&gt;</span><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">CAST</span>(<span class="hljs-string">&#x27;2020-2-21&#x27;</span> <span class="hljs-keyword">AS</span> <span class="hljs-type">DATE</span>) <span class="hljs-keyword">AS</span> date_col;<span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>br<span class="hljs-operator">&gt;</span>返回：<span class="hljs-number">2020</span><span class="hljs-number">-2</span><span class="hljs-number">-21</span><br>        将<span class="hljs-keyword">NULL</span>转换为其他值 <span class="hljs-operator">|</span> <span class="hljs-built_in">COALESCE</span>(数据<span class="hljs-number">1</span>，数据<span class="hljs-number">2</span>，数据<span class="hljs-number">3</span>……) <span class="hljs-operator">|</span> 返回可变参数中左侧开始第<span class="hljs-number">1</span> 个不是<span class="hljs-keyword">NULL</span> 的值。参数个数是可变的，因此可以根据需要无限增加。<br>        <br><span class="hljs-number">2.</span> 谓词<br>    <span class="hljs-operator">*</span> 谓词就是返回值为真值的函数: <span class="hljs-keyword">LIKE</span>； <span class="hljs-keyword">BETWEEN</span>； <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>、<span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>； <span class="hljs-keyword">IN</span>；<span class="hljs-keyword">EXISTS</span><br>    <span class="hljs-operator">*</span> <span class="hljs-keyword">LIKE</span> —— 字符串的部分一致性   <br>        <span class="hljs-operator">%</span> 是代表“<span class="hljs-number">0</span> 字符以上的任意字符串”的特殊符号,例如：<span class="hljs-operator">%</span>abc、abc<span class="hljs-operator">%</span>、<span class="hljs-operator">%</span>abc<span class="hljs-operator">%</span><br>    <span class="hljs-operator">*</span> <span class="hljs-keyword">BETWEEN</span> —— 范围查询<br>        使用示例：<br></code></pre></td></tr></table></figure> SELECT product_name, sale_price FROM Product WHERE sale_price BETWEEN 100 AND 1000; <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">* <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>、<span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> —— 判断是否为<span class="hljs-keyword">NULL</span><br>    使用示例：<br></code></pre></td></tr></table></figure> SELECT product_name, purchase_price FROM Product WHERE purchase_price IS NOT NULL; <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span>IN、NOT IN —— OR有时的替代用法<br><span class="hljs-code">    使用示例：</span><br></code></pre></td></tr></table></figure> SELECT product_name, purchase_price FROM Product WHERE purchase_price NOT IN (320, 500, 5000); <figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">```<br><span class="hljs-keyword">SELECT</span> product_name, sale_price<br><span class="hljs-keyword">FROM</span> Product<br><span class="hljs-keyword">WHERE</span> product_id <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> product_id<br><span class="hljs-keyword">FROM</span> ShopProduct<br><span class="hljs-keyword">WHERE</span> shop_id = <span class="hljs-string">&#x27;000C&#x27;</span>);<br></code></pre></td></tr></table></figure></code></pre><ul><li>EXIST —— 判断是否存在满足某种条件的记录<br>  使用示例：  <figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> product_name, sale_price<br>    <span class="hljs-keyword">FROM</span> Product <span class="hljs-keyword">AS</span> P <br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">EXISTS</span> (<span class="hljs-keyword">SELECT</span> *<br>    <span class="hljs-keyword">FROM</span> ShopProduct <span class="hljs-keyword">AS</span> SP <br>    <span class="hljs-keyword">WHERE</span> SP.shop_id = <span class="hljs-string">&#x27;000C&#x27;</span><br>    <span class="hljs-keyword">AND</span> SP.product_id = P.product_id);<br></code></pre></td></tr></table></figure></li></ul></li><li><p>CASE表达式</p><ol><li>搜索CASE表达式<ul><li>搜索CASE表达式语法</br><br>CASE表达式会从对最初的WHEN子句中的“&lt; 求值表达式&gt;”进行求值开始执行如果结果<br>为真（TRUE），那么就返回THEN 子句中的表达式，CASE 表达式的执行到此为止。如果结果不为真，那么就跳转到下一条WHEN 子句的求值之中。如果直到最后的WHEN 子句为止返回结果都不为真，那么就会返回ELSE中的表达式，执行终止。  <figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bnf">CASE    WHEN <span class="hljs-attribute">&lt;求值表达式&gt;</span> THEN <span class="hljs-attribute">&lt;表达式&gt;</span><br>        WHEN <span class="hljs-attribute">&lt;求值表达式&gt;</span> THEN <span class="hljs-attribute">&lt;表达式&gt;</span><br>        WHEN <span class="hljs-attribute">&lt;求值表达式&gt;</span> THEN <span class="hljs-attribute">&lt;表达式&gt;</span><br>        .. .<br>        ELSE <span class="hljs-attribute">&lt;表达式&gt;</span><br>END<br></code></pre></td></tr></table></figure>  使用示例：  <figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> product_name,<br><span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> product_type = <span class="hljs-string">&#x27;衣服&#x27;</span><br><span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;A ：&#x27;</span> | | product_type<br><span class="hljs-keyword">WHEN</span> product_type = <span class="hljs-string">&#x27;办公用品&#x27;</span><br><span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;B ：&#x27;</span> | | product_type<br><span class="hljs-keyword">WHEN</span> product_type = <span class="hljs-string">&#x27;厨房用具&#x27;</span><br><span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;C ：&#x27;</span> | | product_type<br><span class="hljs-keyword">ELSE</span> <span class="hljs-literal">NULL</span><br><span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> abc_product_type<br><span class="hljs-keyword">FROM</span> Product;<br></code></pre></td></tr></table></figure></li><li>ELSE 子句如果省略不写，会被默认为ELSE NULL。</li><li>CASE 表达式最后的“END”不可省略。</li></ul></li><li>简单CASE表达式</br><br> 简单CASE表达式比搜索CASE表达式简单，但是会受到条件的约束，因此通常情况下都会使用搜索CASE 表达式。<ul><li>简单CASE表达式语法</br>  <figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bnf">CASE <span class="hljs-attribute">&lt;表达式&gt;</span><br>    WHEN <span class="hljs-attribute">&lt;表达式&gt;</span> THEN <span class="hljs-attribute">&lt;表达式&gt;</span><br>    WHEN <span class="hljs-attribute">&lt;表达式&gt;</span> THEN <span class="hljs-attribute">&lt;表达式&gt;</span><br>    WHEN <span class="hljs-attribute">&lt;表达式&gt;</span> THEN <span class="hljs-attribute">&lt;表达式&gt;</span><br>    .. .<br>    ELSE <span class="hljs-attribute">&lt;表达式&gt;</span><br>END<br></code></pre></td></tr></table></figure>  示例：  <figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> product_name,<br><span class="hljs-keyword">CASE</span> product_type<br>    <span class="hljs-keyword">WHEN</span> <span class="hljs-string">&#x27;衣服&#x27;</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;A ：&#x27;</span> | | product_type<br>    <span class="hljs-keyword">WHEN</span> <span class="hljs-string">&#x27;办公用品&#x27;</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;B ：&#x27;</span> | | product_type<br>    <span class="hljs-keyword">WHEN</span> <span class="hljs-string">&#x27;厨房用具&#x27;</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;C ：&#x27;</span> | | product_type<br>    <span class="hljs-keyword">ELSE</span> <span class="hljs-literal">NULL</span><br>    <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> abc_product_type<br><span class="hljs-keyword">FROM</span> Product;<br></code></pre></td></tr></table></figure><h2 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h2>集合：指的是记录的集合。具体来说，表、视图和查询的执行结果都是记录的集合。<h3 id="交并差集运算"><a href="#交并差集运算" class="headerlink" title="交并差集运算"></a>交并差集运算</h3>注意事项：</li></ul></li><li>作为运算对象的记录的列数、每一列的类型必须相同</li><li>ORDER BY子句只能在最后使用一次</li></ol></li><li><p>UNION ———— 并集</p><ul><li>基本语法示例  <figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> product_id, product_name<br><span class="hljs-keyword">FROM</span> Product<br><span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">SELECT</span> product_id, product_name<br><span class="hljs-keyword">FROM</span> Product2;<br></code></pre></td></tr></table></figure></li><li>保留重复行<br>  在UNION 后面添加ALL 关键字。</li></ul></li><li><p>INTERSECT ———— 交集<br> 选取两个记录集合中公共部分</p><ul><li>基本语法示例  <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Oracle <span class="hljs-keyword">SQL</span> <span class="hljs-keyword">Server</span> DB2 PostgreSQL<br><span class="hljs-keyword">SELECT</span> product_id, product_name<br><span class="hljs-keyword">FROM</span> Product<br><span class="hljs-keyword">INTERSECT</span><br><span class="hljs-keyword">SELECT</span> product_id, product_name<br><span class="hljs-keyword">FROM</span> Product2<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> product_id;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>EXCEPT ———— 差集 (ORACLE中关键词为MINUS)</p><ul><li>基本语法  <ul><li>一般数据库示例：<br>  结果为Product 表中记录除去Product2表中记录之后的剩余部分。  <figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> product_id, product_name<br><span class="hljs-keyword">FROM</span> Product<br><span class="hljs-keyword">EXCEPT</span><br><span class="hljs-keyword">SELECT</span> product_id, product_name<br><span class="hljs-keyword">FROM</span> Product2<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> product_id;<br></code></pre></td></tr></table></figure></li><li>oracle示例  <figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> …<br><span class="hljs-keyword">FROM</span> …<br><span class="hljs-keyword">MINUS</span><br><span class="hljs-keyword">SELECT</span> …<br><span class="hljs-keyword">FROM</span> …;<br></code></pre></td></tr></table></figure><h3 id="联结"><a href="#联结" class="headerlink" title="联结"></a>联结</h3>联结（JOIN）就是将其他表中的列添加过来，进行“添加列”的集合运算。UNION是以行（纵向）为单位进行操作，而联结则是以列（横向）为单位进行的。所谓联结运算，一言以蔽之，就是“以A中的列作为桥梁，将B中满足同样条件的列汇集到同一结果之中”。</li></ul></li></ul></li><li><p>INNER JOIN ———— 内联结</p><ul><li>基本语法示例1：<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">SELECT <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SP</span>.</span></span>shop_id, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SP</span>.</span></span>shop_name, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SP</span>.</span></span>product_id, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">P</span>.</span></span>product_name, <br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">P</span>.</span></span>sale_price<br>FROM ShopProduct AS SP INNER JOIN Product AS P <br>ON <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SP</span>.</span></span>product_id = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">P</span>.</span></span>product_id<br>WHERE <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SP</span>.</span></span>shop_id = &#x27;<span class="hljs-number">000</span>A&#x27;;<br></code></pre></td></tr></table></figure></li><li>FROM子句包含多张表，使用关键字INNER JOIN 将两表联结，别名SP 、P非必需。</li><li>在ON 之后指定两张表联结所使用的列（联结键）（product_id）。ON 是专门用来指定联结条件的，它能起到与WHERE 相同的作用。需要指定多个键时，同样可<br>以使用AND、OR。<strong>在进行内联结时ON 子句是必不可少的</strong>（如果没有ON会发生错误），并且ON 必须书写在FROM 和WHERE 之间。</li></ul></li><li><p>OUTER JOIN ———— 外联结<br> 用法与INNER JOIN相同，区别在于：内联结的结果只包含多张表都有的数据，外联结的结果包含主表的所有数据。（显然，外联结的结果数&gt;=内联结的结果数）</p><ul><li>外联结指定主表的关键字是LEFT 和RIGHT。，使用LEFT 时FROM子句中写在左侧的表是主表，使用RIGHT时右侧的表是主表。<br>  下面两个语句，结果相同：  <figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">-- 右侧的表，也就是Product 表是主表<br>SELECT <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SP</span>.</span></span>shop_id, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SP</span>.</span></span>shop_name, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SP</span>.</span></span>product_id, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">P</span>.</span></span>product_name, <br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">P</span>.</span></span>sale_price<br>FROM ShopProduct AS SP RIGHT OUTER JOIN Product AS P<br>ON <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SP</span>.</span></span>product_id = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">P</span>.</span></span>product_id;<br></code></pre></td></tr></table></figure>  <figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">-- 左侧的表，也就是Product表是主表<br>SELECT <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SP</span>.</span></span>shop_id, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SP</span>.</span></span>shop_name, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SP</span>.</span></span>product_id, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">P</span>.</span></span>product_name, <br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">P</span>.</span></span>sale_price<br>FROM Product AS P LEFT OUTER JOIN ShopProduct AS SP ①<br>ON <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SP</span>.</span></span>product_id = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">P</span>.</span></span>product_id;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>两表以上联结<br>示例代码：</p> <figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">SELECT <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SP</span>.</span></span>shop_id, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SP</span>.</span></span>shop_name, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SP</span>.</span></span>product_id, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">P</span>.</span></span>product_name, <br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">P</span>.</span></span>sale_price<br>FROM ShopProduct AS SP INNER JOIN Product AS P<br>ON <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SP</span>.</span></span>product_id = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">P</span>.</span></span>product_id<br>INNER JOIN InventoryProduct AS IP<br>ON <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SP</span>.</span></span>product_id = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">IP</span>.</span></span>product_id<br></code></pre></td></tr></table></figure><h2 id="窗口函数-OLAP-函数"><a href="#窗口函数-OLAP-函数" class="headerlink" title="窗口函数(OLAP 函数)"></a>窗口函数(OLAP 函数)</h2><p>OLAP 是OnLine Analytical Processing 的简称，意思是对数据库数据进行实时分析处理。</p></li></ol><ul><li>窗口函数基本语法  <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;窗口函数&gt; <span class="hljs-keyword">OVER</span> ([<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> &lt;列清单&gt;]<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> &lt;排序用列清单&gt;)<br></code></pre></td></tr></table></figure></li><li>窗口函数包括：<ul><li>所有的聚合函数都能用作窗口函数，其语法和专用窗口函数相同（SUM、AVG、COUNT、MAX、MIN）；</li><li>RANK、DENSE_RANK、ROW_NUMBER 等专用窗口函数</li></ul></li></ul><ol><li>RUANK函数 ———— 记录排序  <ul><li>PARTITION BY 设定排序的对象范围。</li><li>ORDER BY 指定按照哪一列、何种顺序进行排序。</li><li>使用示例：  <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> product_name, product_type, sale_price,<br>RANK () <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> product_type<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> sale_price) <span class="hljs-keyword">AS</span> ranking<br><span class="hljs-keyword">FROM</span> Product;<br></code></pre></td></tr></table></figure>  执行结果：  <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">product_name |<span class="hljs-string"> product_type </span>|<span class="hljs-string"> sale_price </span>|<span class="hljs-string"> ranking</span><br><span class="hljs-string">------------+--------------+-------------+--------</span><br><span class="hljs-string">叉子 </span>|<span class="hljs-string"> 厨房用具 </span>|<span class="hljs-string"> 500 </span>|<span class="hljs-string"> 1</span><br><span class="hljs-string">擦菜板 </span>|<span class="hljs-string"> 厨房用具 </span>|<span class="hljs-string"> 880 </span>|<span class="hljs-string"> 2</span><br><span class="hljs-string">菜刀 </span>|<span class="hljs-string"> 厨房用具 </span>|<span class="hljs-string"> 3000 </span>|<span class="hljs-string"> 3</span><br><span class="hljs-string">高压锅 </span>|<span class="hljs-string"> 厨房用具 </span>|<span class="hljs-string"> 6800 </span>|<span class="hljs-string"> 4</span><br><span class="hljs-string">T恤衫 </span>|<span class="hljs-string"> 衣服 </span>|<span class="hljs-string"> 1000 </span>|<span class="hljs-string"> 1</span><br><span class="hljs-string">运动T恤 </span>|<span class="hljs-string"> 衣服 </span>|<span class="hljs-string"> 4000 </span>|<span class="hljs-string"> 2</span><br><span class="hljs-string">圆珠笔 </span>|<span class="hljs-string"> 办公用品 </span>|<span class="hljs-string"> 100 </span>|<span class="hljs-string"> 1</span><br><span class="hljs-string">打孔器 </span>|<span class="hljs-string"> 办公用品 </span>|<span class="hljs-string"> 500 </span>|<span class="hljs-string"> 2</span><br></code></pre></td></tr></table></figure></li></ul></li><li>SUM 函数作为窗口函数<ul><li>使用示例  <figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> product_id, product_name, sale_price,<br>　<span class="hljs-built_in">SUM</span> (sale_price) <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> product_id) <span class="hljs-keyword">AS</span> current_sum<br><span class="hljs-keyword">FROM</span> Product;<br></code></pre></td></tr></table></figure>  执行结果：  <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">product_id |<span class="hljs-string"> product_name </span>|<span class="hljs-string"> sale_price </span>|<span class="hljs-string"> current_sum</span><br><span class="hljs-string">----------+-----------+-------------+------------</span><br><span class="hljs-string">0001 </span>|<span class="hljs-string"> T恤衫 </span>|<span class="hljs-string"> 1000 </span>|<span class="hljs-string"> 1000 ←1000</span><br><span class="hljs-string">0002 </span>|<span class="hljs-string"> 打孔器 </span>|<span class="hljs-string"> 500 </span>|<span class="hljs-string"> 1500 ←1000+500</span><br><span class="hljs-string">0003 </span>|<span class="hljs-string"> 运动T恤 </span>|<span class="hljs-string"> 4000 </span>|<span class="hljs-string"> 5500 ←1000+500+4000</span><br><span class="hljs-string">0004 </span>|<span class="hljs-string"> 菜刀 </span>|<span class="hljs-string"> 3000 </span>|<span class="hljs-string"> 8500 ←1000+500+4000+3000</span><br><span class="hljs-string">0005 </span>|<span class="hljs-string"> 高压锅 </span>|<span class="hljs-string"> 6800 </span>|<span class="hljs-string"> 15300</span><br><span class="hljs-string">0006 </span>|<span class="hljs-string"> 叉子 </span>|<span class="hljs-string"> 500 </span>|<span class="hljs-string"> 15800</span><br><span class="hljs-string">0007 </span>|<span class="hljs-string"> 擦菜板 </span>|<span class="hljs-string"> 880 </span>|<span class="hljs-string"> 16680</span><br><span class="hljs-string">0008 </span>|<span class="hljs-string"> 圆珠笔 </span>|<span class="hljs-string"> 100 </span>|<span class="hljs-string"> 16780</span><br></code></pre></td></tr></table></figure></li></ul></li><li>计算移动平均<ul><li>使用示例<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">--指定“最靠近的3行”作为汇总对象</span><br><span class="hljs-keyword">SELECT</span> product_id, product_name, sale_price,<br>AVG (sale_price) <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> product_id<br><span class="hljs-keyword">ROWS</span> <span class="hljs-number">2</span> <span class="hljs-keyword">PRECEDING</span>) <span class="hljs-keyword">AS</span> moving_avg<br><span class="hljs-keyword">FROM</span> Product;<br></code></pre></td></tr></table></figure>执行结果<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">product_id</span> <span class="hljs-string">product_name</span> <span class="hljs-string">sale_price</span> <span class="hljs-string">moving_avg</span><br><span class="hljs-string">-----------</span> <span class="hljs-string">-------------</span> <span class="hljs-string">-------------</span> <span class="hljs-string">------------</span><br><span class="hljs-number">0001 </span><span class="hljs-string">T恤衫</span> <span class="hljs-number">1000 </span><span class="hljs-number">1000</span> <span class="hljs-string">←(1000)/1</span><br><span class="hljs-number">0002</span> <span class="hljs-string">打孔器</span> <span class="hljs-number">500</span> <span class="hljs-number">750</span> <span class="hljs-string">←(1000+500)/2</span><br><span class="hljs-number">0003</span> <span class="hljs-string">运动T恤</span> <span class="hljs-number">4000 </span><span class="hljs-number">1833</span> <span class="hljs-string">←(1000+500+4000)/3</span><br><span class="hljs-number">0004</span> <span class="hljs-string">菜刀</span> <span class="hljs-number">3000 </span><span class="hljs-number">2500</span> <span class="hljs-string">←(500+4000+3000)/3</span><br><span class="hljs-number">0005</span> <span class="hljs-string">高压锅</span> <span class="hljs-number">6800 </span><span class="hljs-number">4600</span> <span class="hljs-string">←(4000+3000+6800)/3</span><br><span class="hljs-number">0006</span> <span class="hljs-string">叉子</span> <span class="hljs-number">500</span> <span class="hljs-number">3433</span><br><span class="hljs-number">0007</span> <span class="hljs-string">擦菜板</span> <span class="hljs-number">880</span> <span class="hljs-number">2726</span><br><span class="hljs-number">0008</span> <span class="hljs-string">圆珠笔</span> <span class="hljs-number">100</span> <span class="hljs-number">493</span><br></code></pre></td></tr></table></figure><h2 id="GROUPING运算符"><a href="#GROUPING运算符" class="headerlink" title="GROUPING运算符"></a>GROUPING运算符</h2>用于小计、合计，不常用</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
